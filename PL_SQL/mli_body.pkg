create or replace PACKAGE BODY    MLI
AS
   /******************************************************************************
      NAME:       MLI_SUBSCRIPTION
      PURPOSE:    This package contains function/procedures required for MLI
           Notification

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        6/30/2010    Ramyajit        1. Created this package body.
      2.0        10/06/2010   Ramyajit        1. Added a condition in update_subscription for 'EDW'
                                              2. Added conditions in Generate_Notification for 'EDW'
                                              3. Added conditions in Create_Mli_Response for 'EDW'
      3.0        01/21/2011   Ramyajit        1. Added conditions in Create_Mli_Response for 'IPSLA' TNR009
                                              2. Added conditions in Update_Subscription for 'IPSLA' TNR009
      4.0        04/17/2011   Princy          1. Added New function Create_Mli_REsponse_5_0 for TNR011
      5.0        04/26/2011   Nilesh          1. Added New procedure Create_notification_files for TNR011
      6.0        07/12/2011   Ramyajit        1. Modified for TNR013 HTTP DNS Release.
      7.0        07/14/2011   Ramyajit        1. Modified for TNR013 MLI 5.0 Migration to Netrep.
      8.0        09/19/2011   Princy          1. Modified for Soap Env changes for Ontario.
      9.0        02/10/2012   Princy          1. Modified for GSCE-53703
      10.0       27/06/2014   Shahrul Z       1. Modified for NIAB 
      11.0       19/08/2014   KarWai          1. Modified for WLAN CSDK34-GSCE-133857 WLAN Reporting

      12.0       03/09/2014   Shahrul Z       1. Modified for NIAB Phase 2
      13.0       03/10/2014   Andrew G        1. Modified for NIAB Phase 2 - IT Server Monitoring
      14.0       14/11/2014   Shahrul Z       1. Code optimisation when bfg_product_id is null
      14.1       14/11/2014   Karyn           1. Modified the size of v_data_fileName and v_par_fileName for XFB output file
      15.0       21/11/2014   Shahrul Z       1. Bug fix UPDATE_SUBSCRIPTION procedure: 
                                                 Voyance is receiving notification for devices which they do not subscribed. 40k notification per day :O
      16.0       22/11/2014   Shahrul Z       1. Change line 6167. XML_COPIED should be  Y for 8.0
      17.0         02/11/2014      Andrew Goh      1. Adding two functions for NIAB Phase 2 story
      18.0       02/12/2014   KarWai          1. New procedure to generate notification
                                                 - GET_COUNT_MANAGED_DEVICE
                                                 - GET_ID_MANAGED_DEVICE
      19.0        15/06/2015 Karyn            1. Modified to send empty device operation for probe level notification (MLI 8.0)
      20.0        30/06/2015 Shahrul Z        1. Modified to resolve missing interface info for W4N notification
      21.0        21/01/2016  Shahrul Z       1. Added SNE ID into MLI 8 notification for GSCE-162802 
      22.0        15/06/2016 Prajesh A        1. Modified to add more attributes to BFG XML response for GSCE-175763
                                                - Added new cursors C_ADDRESS and C_LOCATION
                                                - Added new param p_bfg_ntn_id to GET_MLI_8_0_DEVICE
												- Added new XML attributes queried from BFG_ADDRESSES and BFG_LOCATIONS tables
   *************************************************************************************************************/


   /******************START FUNCTION CREATE_MLI_RESPONSE********************************************************/

   FUNCTION CREATE_MLI_RESPONSE (p_md_id            IN NUMBER,
                                 p_operation        IN VARCHAR DEFAULT NULL,
                                 p_type             IN VARCHAR DEFAULT NULL,
                                 p_interface_id     IN NUMBER DEFAULT NULL,
                                 p_Destination_Id   IN VARCHAR DEFAULT NULL,
                                 p_test_id          IN NUMBER DEFAULT NULL,
                                 p_entity           IN VARCHAR DEFAULT NULL,
                                 p_msg_id           IN NUMBER)
      RETURN CLOB
   IS
      /*
      function comments.
      */

      v_output_xml               CLOB;
      v_doc                      xmlDom.domDocument := xmldom.newDomdocument;
      v_managed_devices          xmlDom.domNode;
      v_name                     xmlDom.domNode;
      v_ptp                      xmlDom.domNode;
      v_tmp                      xmlDom.domNode;
      v_tmp_1                    xmlDom.domNode;

      v_md_id                    managed_Devices.id%TYPE;
      v_host_name                managed_devices.host_name%TYPE;
      v_cg_id                    managed_devices.net_cg_id%TYPE;
      v_ip_address               managed_devices.ip_address%TYPE;
      v_customer_ip_address      managed_devices.customer_ip_address%TYPE;
      v_cus_name                 managed_devices.cus_name%TYPE;
      v_net_name                 managed_devices.net_name%TYPE;
      v_bfg_ntn_id               managed_devices.bfg_ntn_id%TYPE;
      v_bfg_site_id              bfg_sites.sit_id%TYPE;
      v_bfg_site_name            bfg_sites.sit_name%TYPE;
      v_lc_key                   managed_devices.lc_key%TYPE;

      --Added by Ramyajit on 27/10/2010 for getting dates in format 'yyyy-mm-dd hh24:mi:ss'
      v_modified_date            VARCHAR2 (30);
      -- Add END By Ramyajit on 27/10/2010 for getting dates in format 'yyyy-mm-dd hh24:mi:ss'

      v_sysobjectid              managed_Devices.sysobjectid%TYPE;
      v_cdsv_key                 managed_devices.cdsv_key%TYPE;
      v_net_id                   managed_devices.net_id%TYPE;
      v_cust_host_name           managed_devices.customer_host_name%TYPE;
      v_dt_key                   managed_devices.dt_key%TYPE;
      v_dr_key                   managed_devices.dr_key%TYPE;

      --Added By Ramyajit on 27/10/2010 for getting dates in format 'yyyy-mm-dd hh24:mi:ss'
      v_create_date              VARCHAR2 (30);
      v_ceased_date              VARCHAR2 (30);
      -- Add END By Ramyajit on 27/10/2010 for getting dates in format 'yyyy-mm-dd hh24:mi:ss'

      v_cus_id                   managed_devices.cus_id%TYPE;
      v_device_operation         VARCHAR2 (50) := 'updateInventory';

      v_management_domain        VARCHAR2 (4000);
      v_region_code              VARCHAR2 (4000);
      --Added as part of Ontario Server Reporting TNR011
      v_bfg_product_type         BFG_NODE_PRODUCT_TYPES.NDT_NAME%TYPE;
      --Added Ended
      --Added as part of IWAN Performance reporting (Andrew)
      v_ntn_role                BFG_NETWORK_NODES.NTN_ROLE%TYPE;
      --Add Ended
      v_bfg_cus_id               customers.bfg_cus_id%TYPE;
      v_read_cs                  networks.read_cs%TYPE;
      v_write_cs                 networks.write_cs%TYPE;
      v_network_type             network_types.description%TYPE;

      v_dt_descr                 device_types.description%TYPE;
      v_dr_descr                 device_roles.description%TYPE;
      v_cdsv_descr               concord_device_service.description%TYPE;
      v_status_descr             log_classes.description%TYPE;
      v_snmp_flag                VARCHAR2 (30);
      v_model                    managed_devices.bfg_ndp_name%TYPE;
      v_contract_id              bfg_network_nodes.ntn_con_id%TYPE;

      /*********************For EDW Start Added by Ramyajit on 06/10/2010************************************************/
      v_vas_product_name         bfg_feature_options.feo_name%TYPE;
      v_vas_cease_date           s_bfg_feature_option_instances.foi_cease_date%TYPE;

      /*********************For EDW End**************************************************/

      v_Interface_id             Interfaces.Id%TYPE;

      /*Added as part of IPSLA Changes*/
      v_prob_state               VARCHAR2 (50) := NULL;
      v_prob_test_name           saa_tests.description%TYPE;
      v_prob_test_type           saa_test_types.description%TYPE;
      v_prob_test_protocol       domain_values.meaning%TYPE;
      v_prob_source_port_no      parameter_values.VALUE%TYPE;
      v_prob_source_ip_address   parameter_values.VALUE%TYPE;
      v_prob_target_ip_address   parameter_values.VALUE%TYPE;
      v_prob_target_port_no      parameter_values.VALUE%TYPE;
      v_prob_test_freq           parameter_values.VALUE%TYPE;
      v_prob_packets_count       parameter_values.VALUE%TYPE;
      v_prob_service_class       parameter_values.VALUE%TYPE;
      v_prob_test_start_time     parameter_values.VALUE%TYPE;
      v_prob_test_life           parameter_values.VALUE%TYPE;
      v_prob_packet_size         parameter_values.VALUE%TYPE;
      v_prob_packet_interval     parameter_values.VALUE%TYPE;

      /* Add Ended as part of IPSLA Changes*/

      /*Added as part of Soan Envelop */
      v_temp                     xmlDom.domNode;
      v_header                   xmlDom.domNode;
      v_header_root              xmlDom.domNode;

      PROCEDURE create_nvs (p_doc     IN xmlDom.domDocument,
                            p_name    IN VARCHAR2,
                            p_value   IN VARCHAR2,
                            p_node    IN xmlDom.domNode)
      IS
         v_nvs   xmlDom.domNode;
      BEGIN
         v_nvs := dom.create_element_after (p_doc, p_node, 'mtos:nvs');
         dom.create_element_with_text_after (p_doc,
                                             v_nvs,
                                             'stru:attributeName',
                                             p_name);
         v_nvs :=
            dom.create_element_with_text_after (p_doc,
                                                v_nvs,
                                                'stru:attributeValue',
                                                p_value);
      END;

      PROCEDURE create_ptps (p_doc            IN XMLDOM.DOMDOCUMENT,
                             p_node           IN XMLDOM.DOMNODE,
                             p_md_id          IN NUMBER,
                             p_interface_id   IN NUMBER,
                             p_operation      IN VARCHAR)
      IS
         v_ptp               xmlDom.domNode;
         v_tmp               xmlDom.domNode;
         v_management_type   VARCHAR2 (4000);
         v_interface_oper    VARCHAR2 (50) := NULL;
      BEGIN
         FOR rec
            IN (SELECT id,
                       port,
                       name,
                       label,
                       configured_bandwidth,
                       actual_bandwidth,
                       duplex,
                       cease_date,
                       modified_date,
                       management_type,
                       domain,
                       adsl_actual_upstream_speed,
                       adsl_actual_downstream_speed
                  FROM interfaces
                 WHERE md_id = p_md_id AND id = NVL (p_interface_id, id))
         LOOP
            BEGIN
               SELECT NVL (domain.get_meaning ('INM', rec.management_type),
                           '')
                 INTO v_management_type
                 FROM DUAL;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;

            v_interface_oper := NULL;

            IF NVL (p_interface_id, 0) = rec.id
            /* The current interface is added , updated or ceased */
            THEN
               /* Decode the operation */
               IF p_operation = 'I'
               THEN
                  v_interface_oper := 'interfaceAdded';
               ELSIF p_operation = 'U'
               THEN
                  v_interface_oper := 'interfaceUpdated';
               ELSE
                  v_interface_oper := 'interfaceCeased';
               END IF;
            END IF;

            v_ptp :=
               dom.create_element_after (p_doc,
                                         p_node,
                                         'mtos:physicalTerminationPoint');
            dom.create_element_with_text_after (p_doc,
                                                v_ptp,
                                                'mtos:userLabel',
                                                rec.label);

            /******************For Edw start Added by Ramyajit on 06/10/2010***************************************/

            --dom.create_element_with_text_after(p_doc,v_ptp,'mtos:directionality',rec.domain);

            /******************For Edw End****************************************/

            dom.create_element_with_text_after (p_doc,
                                                v_ptp,
                                                'mtos:resourceState',
                                                'INSTALLED');
            v_tmp := dom.create_element_after (p_doc, v_ptp, 'mtos:name');
            v_tmp := dom.create_element_after (p_doc, v_tmp, 'mtos:name');
            v_tmp := dom.create_element_after (p_doc, v_tmp, 'mtos:rdn');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'mtos:type',
                                                'PTP');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'mtos:value',
                                                rec.port);
            v_tmp :=
               dom.create_element_after (p_doc, v_ptp, 'mtos:aliasNameList');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'stru:attributeName',
                                                'InterfaceName');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'stru:attributeValue',
                                                rec.name);
            v_tmp :=
               dom.create_element_after (p_doc, v_ptp, 'mtos:aliasNameList');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'stru:attributeName',
                                                'PortID');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'stru:attributeValue',
                                                rec.id);
            v_tmp :=
               dom.create_element_after (p_doc, v_ptp, 'mtos:additionalInfo');

            IF v_interface_oper IS NOT NULL
            THEN
               create_nvs (p_doc,
                           'PTPOperation',
                           v_interface_oper,
                           v_tmp);
            END IF;

            BEGIN
               create_nvs (
                  p_doc,
                  'InterfaceDescription',
                  mib.get_interface_mib_entry (rec.id, '1.3.6.1.2.1.2.2.1.2'),
                  v_tmp);
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;

            create_nvs (p_doc,
                        'InterfaceCeasedDate',
                        rec.cease_date,
                        v_tmp);
            create_nvs (p_doc,
                        'InterfaceLastModifiedDate',
                        rec.modified_date,
                        v_tmp);
            dom.create_element_with_text_after (p_doc,
                                                v_ptp,
                                                'mtos:usage',
                                                v_management_type);
            dom.create_element_with_text_after (p_doc,
                                                v_ptp,
                                                'mtos:capacity',
                                                '');
            dom.create_element_with_text_after (p_doc,
                                                v_ptp,
                                                'mtos:directionality',
                                                rec.domain);

            v_tmp :=
               dom.create_element_after (p_doc,
                                         v_ptp,
                                         'mtos:transmissionDescriptor');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'mtos:name',
                                                'dsl');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'mtos:otherName',
                                                'ADSL');
            v_tmp :=
               dom.create_element_after (p_doc,
                                         v_tmp,
                                         'mtos:transmissionParameters');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'mtos:layerRate',
                                                'LR_DSL');
            v_tmp :=
               dom.create_element_after (p_doc, v_tmp, 'mtos:parameters');
            create_nvs (p_doc,
                        'DataRate',
                        rec.adsl_actual_downstream_speed,
                        v_tmp);
            create_nvs (p_doc,
                        'RU_DataRate',
                        rec.adsl_actual_upstream_speed,
                        v_tmp);

            v_tmp :=
               dom.create_element_after (p_doc,
                                         v_ptp,
                                         'mtos:transmissionDescriptor');
            v_tmp :=
               dom.create_element_after (p_doc,
                                         v_tmp,
                                         'mtos:transmissionParameters');
            dom.create_element_with_text_after (p_doc,
                                                v_tmp,
                                                'mtos:layerRate',
                                                'LR_Not_Applicable');
            v_tmp :=
               dom.create_element_after (p_doc, v_tmp, 'mtos:parameters');
            create_nvs (p_doc,
                        'AdministrativeSpeedRate',
                        rec.configured_bandwidth,
                        v_tmp);
            create_nvs (p_doc,
                        'ActualSpeedRate',
                        rec.actual_bandwidth,
                        v_tmp);
            create_nvs (p_doc,
                        'DuplexMode',
                        rec.duplex,
                        v_tmp);
         END LOOP;
      END;

      /*Added as part of IPSLA Changes on 21/01/2011*/
      PROCEDURE create_probes (p_doc               IN XMLDOM.DOMDOCUMENT,
                               p_md_id             IN NUMBER,
                               p_test_id           IN NUMBER,
                               p_operation         IN VARCHAR,
                               p_managed_devices   IN XMLDOM.DOMNODE)
      IS
         p_name    xmlDom.domNode;
         p_name1   xmlDom.domNode;
      BEGIN
         --p_name := dom.create_element_after(p_doc,p_managed_devices,'mtos:additionalInfo');
         /*Added as part of IPSLA Changes*/
         IF (p_test_id IS NOT NULL)
         THEN
            /*Princy Modified the query to add test_id in the where clause--by Ramyajit on 23/03/2011 for TNR010 NETREP SOLSTICE release*/

            FOR crec IN (SELECT ID,
                                TEST_NAME,
                                TEST_TYPE,
                                TEST_PROTOCOL,
                                SOURCE_PORT,
                                SOURCE_IP_ADDRESS,
                                TARGET_IP_ADDRESS,
                                TARGET_PORT,
                                TEST_FREQUENCY,
                                NO_OF_PACKETS,
                                SERVICE_CLASS,
                                TEST_START_TIME,
                                TEST_LIFE,
                                PACKETS_SIZE,
                                PACKETS_INTERVAL,
                                TARGET_URL
                           FROM mli_probes
                          WHERE md_id_source = p_md_id AND id = p_test_id)
            LOOP
               /*Add Ended as part of IPSLA CHnages*/
               -- v_name := dom.create_element_after(v_doc,v_managed_devices,'mtos:additionalInfo');

               v_name :=
                  dom.create_element_after (p_doc,
                                            p_managed_devices,
                                            'mtos:additionalInfo');

               /*Added as part of IPSLA changes*/
               IF NVL (p_test_id, 0) = crec.id
               THEN
                  /* The current probe is added , updated or ceased */
                  IF p_operation = 'I'
                  THEN
                     v_prob_state := 'ProbeCreated';
                  ELSIF p_operation = 'U'
                  THEN
                     v_prob_state := 'ProbeUpdated';
                  ELSE
                     v_prob_state := 'ProbeCeased';
                  END IF;
               END IF;

               create_nvs (v_doc,
                           'prob_state',
                           v_prob_state,
                           v_name);                             -- Probe State

               create_nvs (v_doc,
                           'prob_testName',
                           crec.test_name,
                           v_name);                              -- Test Namee
               create_nvs (v_doc,
                           'prob_testType',
                           crec.test_type,
                           v_name);                               -- Test Type
               create_nvs (v_doc,
                           'prob_testProtocol',
                           crec.test_protocol,
                           v_name);                           -- Test Protocol
               create_nvs (v_doc,
                           'prob_sourcePortNumber',
                           crec.source_port,
                           v_name);                      -- Source Port Number
               create_nvs (v_doc,
                           'prob_sourceIpAddress',
                           crec.source_ip_address,
                           v_name);                       -- Source IP Address
               create_nvs (v_doc,
                           'prob_targetIpAddress',
                           crec.target_ip_address,
                           v_name);                       -- Target IP Address
               create_nvs (v_doc,
                           'prob_targetPortNumber',
                           crec.target_port,
                           v_name);                      -- Target Port Number
               create_nvs (v_doc,
                           'prob_testFrequency',
                           crec.test_frequency,
                           v_name);                          -- Test Frequency
               create_nvs (v_doc,
                           'prob_packetsCount',
                           crec.no_of_packets,
                           v_name);                           -- Packets Count
               create_nvs (v_doc,
                           'prob_serviceClass',
                           crec.service_class,
                           v_name);                           -- Service Class
               create_nvs (v_doc,
                           'prob_testStartTime',
                           crec.test_start_time,
                           v_name);                         -- Test Start Time
               create_nvs (v_doc,
                           'prob_testLife',
                           crec.test_life,
                           v_name);                              --  Test Life
               create_nvs (v_doc,
                           'prob_packetSize',
                           crec.packets_size,
                           v_name);                            --  Packet Size
               create_nvs (v_doc,
                           'prob_packetInterval',
                           crec.packets_interval,
                           v_name);                        --  Packet Interval

               IF (crec.test_type IN ('http', 'dns'))
               THEN
                  create_nvs (v_doc,
                              'prob_targetURL',
                              crec.target_url,
                              v_name);
               END IF;
            END LOOP;

            FOR crec1 IN (SELECT ID,
                                 TEST_NAME,
                                 TEST_TYPE,
                                 TEST_PROTOCOL,
                                 SOURCE_PORT,
                                 SOURCE_IP_ADDRESS,
                                 TARGET_IP_ADDRESS,
                                 TARGET_PORT,
                                 TEST_FREQUENCY,
                                 NO_OF_PACKETS,
                                 SERVICE_CLASS,
                                 TEST_START_TIME,
                                 TEST_LIFE,
                                 PACKETS_SIZE,
                                 PACKETS_INTERVAL,
                                 TARGET_URL
                            FROM mli_probes_deleted
                           WHERE id = p_test_id)
            LOOP
               /*Add Ended as part of IPSLA CHnages*/
               -- v_name := dom.create_element_after(v_doc,v_managed_devices,'mtos:additionalInfo');

               v_name :=
                  dom.create_element_after (p_doc,
                                            p_managed_devices,
                                            'mtos:additionalInfo');

               v_prob_state := 'ProbeCeased';


               create_nvs (v_doc,
                           'prob_state',
                           v_prob_state,
                           v_name);                             -- Probe State

               create_nvs (v_doc,
                           'prob_testName',
                           crec1.test_name,
                           v_name);                              -- Test Namee
               create_nvs (v_doc,
                           'prob_testType',
                           crec1.test_type,
                           v_name);                               -- Test Type
               create_nvs (v_doc,
                           'prob_testProtocol',
                           crec1.test_protocol,
                           v_name);                           -- Test Protocol
               create_nvs (v_doc,
                           'prob_sourcePortNumber',
                           crec1.source_port,
                           v_name);                      -- Source Port Number
               create_nvs (v_doc,
                           'prob_sourceIpAddress',
                           crec1.source_ip_address,
                           v_name);                       -- Source IP Address
               create_nvs (v_doc,
                           'prob_targetIpAddress',
                           crec1.target_ip_address,
                           v_name);                       -- Target IP Address
               create_nvs (v_doc,
                           'prob_targetPortNumber',
                           crec1.target_port,
                           v_name);                      -- Target Port Number
               create_nvs (v_doc,
                           'prob_testFrequency',
                           crec1.test_frequency,
                           v_name);                          -- Test Frequency
               create_nvs (v_doc,
                           'prob_packetsCount',
                           crec1.no_of_packets,
                           v_name);                           -- Packets Count
               create_nvs (v_doc,
                           'prob_serviceClass',
                           crec1.service_class,
                           v_name);                           -- Service Class
               create_nvs (v_doc,
                           'prob_testStartTime',
                           crec1.test_start_time,
                           v_name);                         -- Test Start Time
               create_nvs (v_doc,
                           'prob_testLife',
                           crec1.test_life,
                           v_name);                              --  Test Life
               create_nvs (v_doc,
                           'prob_packetSize',
                           crec1.packets_size,
                           v_name);                            --  Packet Size
               create_nvs (v_doc,
                           'prob_packetInterval',
                           crec1.packets_interval,
                           v_name);                        --  Packet Interval

               /*Added by Ramyajit for HTTP_DNS TNR013*/
               IF (crec1.test_type IN ('http', 'dns'))
               THEN
                  create_nvs (v_doc,
                              'prob_targetURL',
                              crec1.target_url,
                              v_name);
               END IF;
            /*Add Ended by Ramyajit for TNR013*/
            END LOOP;
         END IF;                                       /*modified by Princy */

         IF (p_test_id IS NULL AND p_operation = 'D')
         THEN
            v_prob_state := 'ProbeCeased';

            FOR crec IN (SELECT ID,
                                TEST_NAME,
                                TEST_TYPE,
                                TEST_PROTOCOL,
                                SOURCE_PORT,
                                SOURCE_IP_ADDRESS,
                                TARGET_IP_ADDRESS,
                                TARGET_PORT,
                                TEST_FREQUENCY,
                                NO_OF_PACKETS,
                                SERVICE_CLASS,
                                TEST_START_TIME,
                                TEST_LIFE,
                                PACKETS_SIZE,
                                PACKETS_INTERVAL,
                                TARGET_URL
                           FROM mli_probes
                          WHERE md_id_source = p_md_id)
            LOOP
               -- v_name := dom.create_element_after(v_doc,v_managed_devices,'mtos:additionalInfo');

               v_name :=
                  dom.create_element_after (p_doc,
                                            p_managed_devices,
                                            'mtos:additionalInfo');

               create_nvs (v_doc,
                           'prob_state',
                           v_prob_state,
                           v_name);                             -- Probe State
               create_nvs (v_doc,
                           'prob_testName',
                           crec.test_name,
                           v_name);                              -- Test Namee
               create_nvs (v_doc,
                           'prob_testType',
                           crec.test_type,
                           v_name);                               -- Test Type
               create_nvs (v_doc,
                           'prob_testProtocol',
                           crec.test_protocol,
                           v_name);                           -- Test Protocol
               create_nvs (v_doc,
                           'prob_sourcePortNumber',
                           crec.source_port,
                           v_name);                      -- Source Port Number
               create_nvs (v_doc,
                           'prob_sourceIpAddress',
                           crec.source_ip_address,
                           v_name);                       -- Source IP Address
               create_nvs (v_doc,
                           'prob_targetIpAddress',
                           crec.target_ip_address,
                           v_name);                       -- Target IP Address
               create_nvs (v_doc,
                           'prob_targetPortNumber',
                           crec.target_port,
                           v_name);                      -- Target Port Number
               create_nvs (v_doc,
                           'prob_testFrequency',
                           crec.test_frequency,
                           v_name);                          -- Test Frequency
               create_nvs (v_doc,
                           'prob_packetsCount',
                           crec.no_of_packets,
                           v_name);                           -- Packets Count
               create_nvs (v_doc,
                           'prob_serviceClass',
                           crec.service_class,
                           v_name);                           -- Service Class
               create_nvs (v_doc,
                           'prob_testStartTime',
                           crec.test_start_time,
                           v_name);                         -- Test Start Time
               create_nvs (v_doc,
                           'prob_testLife',
                           crec.test_life,
                           v_name);                              --  Test Life
               create_nvs (v_doc,
                           'prob_packetSize',
                           crec.packets_size,
                           v_name);                            --  Packet Size
               create_nvs (v_doc,
                           'prob_packetInterval',
                           crec.packets_interval,
                           v_name);                        --  Packet Interval

               IF (crec.test_type IN ('http', 'dns'))
               THEN
                  create_nvs (v_doc,
                              'prob_targetURL',
                              crec.target_url,
                              v_name);
               END IF;
            END LOOP;
         END IF;
      /*Add Ended as part of IPSLA changes*/
      END create_probes;

   /*Add ended as part of IPSLA CHnages on 21/01/2011*/


   BEGIN
      /* Main function Start */
      --  v_managementDomain := dom.create_element_after (v_doc,xmldom.makenode(v_doc),'managementDomain');

      --Modified the Query to add dates in format 'yyyy-mm-dd hh24:mi:ss' by Ramyajit on 27/10/2010

      SELECT host_name,
             net_cg_id,
             ip_address,
             customer_ip_address,
             cus_name,
             net_name,
             bfg_ntn_id,
             lc_key,
             TO_CHAR (modified_date, 'yyyy-mm-dd hh24:mi:ss') modified_date,
             sysobjectid,
             cdsv_key,
             net_id,
             customer_host_name,
             dt_key,
             dr_key,
             TO_CHAR (create_date, 'yyyy-mm-dd hh24:mi:ss') create_date,
             TO_CHAR (ceased_date, 'yyyy-mm-dd hh24:mi:ss') ceased_date,
             cus_id,
             DECODE (activated, 'Y', 'WORKING', 'STANDBY'),
             bfg_ndp_name
        INTO v_host_name,
             v_cg_id,
             v_ip_address,
             v_customer_ip_address,
             v_cus_name,
             v_net_name,
             v_bfg_ntn_id,
             v_lc_key,
             v_modified_date,
             v_sysobjectid,
             v_cdsv_key,
             v_net_id,
             v_cust_host_name,
             v_dt_key,
             v_dr_key,
             v_create_date,
             v_ceased_date,
             v_cus_id,
             v_snmp_flag,
             v_model
        FROM managed_Devices md
       WHERE id = p_md_id;

       BEGIN
          SELECT SIT_ID, SIT_NAME into v_bfg_site_id, v_bfg_site_name
          FROM bfg_network_nodes ntn, bfg_sites sit WHERE ntn.ntn_sit_id=sit.sit_id and ntn.ntn_id = v_bfg_ntn_id;
       EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            SELECT cs_id, bfg_site_name into v_bfg_site_id, v_bfg_site_name
            FROM managed_Devices md
            WHERE id = p_md_id;
       END;

      -- added by Ramyajit on 20/10/2010 for not generating the output xml when Interface Id Is not Null and lc_key = 'CSD'

      IF (p_interface_id IS NOT NULL AND v_lc_key = 'CSD')
      THEN
         v_output_xml := NULL;
         RETURN v_output_xml;
      END IF;


      BEGIN
         SELECT net.read_cs, net.write_cs, nt.description
           INTO v_read_cs, v_write_cs, v_network_type
           FROM networks net, network_types nt
          WHERE id = v_net_id AND nt.key = net.nt_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT bfg_cus_id
           INTO v_bfg_cus_id
           FROM customers
          WHERE id = v_cus_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_dt_descr
           FROM device_types
          WHERE KEY = v_dt_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_dr_descr
           FROM device_roles
          WHERE KEY = v_dr_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_cdsv_descr
           FROM concord_device_service
          WHERE KEY = v_cdsv_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_status_descr
           FROM log_classes
          WHERE KEY = v_lc_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT NVL (management_domain.GET_MD_MGMT_DOMAIN (p_md_id, 1), '')
           INTO v_management_domain
           FROM DUAL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT ntn_con_id,ntn_role
          INTO v_contract_id,v_ntn_role
           FROM bfg_network_nodes
          WHERE ntn_id = v_bfg_ntn_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT NVL (region.get_region_code (v_bfg_ntn_id), '')
           INTO v_region_code
           FROM DUAL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      --Added as part of Ontario server Reporting TNR011
      BEGIN
         SELECT BNPT.NDT_NAME BFG_PRODUCT_TYPE
           INTO v_bfg_product_type
           FROM BFG_NETWORK_NODES BFG_NET,
                BFG_NODE_PRODUCTS BNP,
                BFG_NODE_PRODUCT_TYPES BNPT
          WHERE     BFG_NET.NTN_NDP_ID = BNP.NDP_ID
                AND BNP.NDP_NDT_ID = BNPT.NDT_ID
                AND BFG_NET.NTN_ID = v_bfg_ntn_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      --Add Ended



      /********************For EDW start Added by Ramyajit on 06/102010******/
      IF (LOWER (p_Destination_Id) = 'edw')
      THEN
         BEGIN
            SELECT DISTINCT a.vas_product_name, c.foi_cease_date
              INTO v_vas_product_name, v_vas_cease_date
              FROM mli_subscription a,
                   bfg_feature_options b,
                   s_bfg_feature_option_instances c,
                   bfg_feature_opt_net_nodes d
             WHERE     a.vas_product_name = b.feo_name
                   AND b.feo_id = c.foi_feo_id
                   AND c.foi_id = d.foi_foi_id
                   AND d.foi_ntn_id = v_bfg_ntn_id
                   AND LOWER (a.Destination_Id) = 'edw';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;
      END IF;

      /********************For EDW END********/


      IF (p_type = 'S')
      THEN
         /* Decode the operation */
         CASE p_operation
            WHEN 'I'
            THEN
               v_device_operation := 'addInventory';
            WHEN 'U'
            THEN
               v_device_operation := 'updateInventory';
            ELSE
               v_device_operation := 'ceaseInventory';
         END CASE;

         /*Modified by Ramyajit for TNR015 Warranty Drop Ontario Changes*/
         IF (   ( (NVL (p_interface_id, 0) > 0) AND v_lc_key = 'IS')
             OR ( (NVL (p_test_id, 0) > 0) AND v_lc_key = 'IS'))
         THEN
            v_device_operation := 'updateInventory';
         ELSIF (   ( (NVL (p_interface_id, 0) > 0) AND v_lc_key = 'CSD')
                OR ( (NVL (p_test_id, 0) > 0) AND v_lc_key = 'CSD'))
         THEN
            v_device_operation := 'ceaseInventory';
         END IF;

         /* If the response is to be created for subscription, then the XML will have data for a single device.
          So we will create the XML from inventory tag */

         --Start of addition of Header part  for soapenvlp
         v_header_root :=
            dom.create_element_after (v_doc, xmldom.makenode (v_doc), 'root');
         v_header :=
            dom.create_element_after (v_doc,
                                      v_header_root,
                                      'head:standardHeader');
         dom.create_attribute_for (v_doc,
                                   v_header,
                                   'xmlns:java',
                                   'http://xml.apache.org/xslt/java');
         dom.create_attribute_for (v_doc,
                                   v_header,
                                   'xmlns:fo',
                                   'http://www.w3.org/1999/XSL/Format');
         v_tmp :=
            dom.create_element_after (v_doc, v_header, 'head:serviceState');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp,
                                             'head:stateCode',
                                             'OK');
         v_tmp_1 :=
            dom.create_element_after (v_doc,
                                      v_header,
                                      'head:serviceAddressing');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:from',
                                             'NMDB');
         v_ptp := dom.create_element_after (v_doc, v_tmp_1, 'head:to');
         dom.create_element_with_text_after (v_doc,
                                             v_ptp,
                                             'head:address',
                                             p_Destination_Id);
         v_ptp := dom.create_element_after (v_doc, v_tmp_1, 'head:replyTo');
         dom.create_element_with_text_after (v_doc,
                                             v_ptp,
                                             'head:address',
                                             'NMDB');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:messageId',
                                             p_msg_id);
         dom.create_element_with_text_after (
            v_doc,
            v_tmp_1,
            'head:serviceName',
            'http://itprogrammes.intra.bt.com/pdb/capabilities/ManageDaaliResource/2005/11/16');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:action',
                                             'inventoryNotification');
         v_temp :=
            dom.create_element_after (v_doc,
                                      v_header,
                                      'head:serviceSpecification');
         dom.create_element_with_text_after (v_doc,
                                             v_temp,
                                             'head:payloadFormat',
                                             'XML');
         dom.create_element_with_text_after (v_doc,
                                             v_temp,
                                             'head:version',
                                             '4.2');
         dom.create_element_with_text_after (v_doc,
                                             v_temp,
                                             'head:revision',
                                             '');

         --End of Addition of Header part for soapenvlp

         v_managed_devices :=
            dom.create_element_after (v_doc, v_header_root, 'inventory');
         dom.create_element_with_text_after (v_doc,
                                             v_managed_devices,
                                             'notificationOrUpdate',
                                             v_device_operation);
         dom.create_element_with_text_after (v_doc,
                                             v_managed_devices,
                                             'totalNumber',
                                             '1');
         dom.create_element_with_text_after (v_doc,
                                             v_managed_devices,
                                             'indexNumber',
                                             '1');
         v_managed_devices :=
            dom.create_element_after (v_doc,
                                      v_managed_devices,
                                      'managementDomain');
         v_managed_devices :=
            dom.create_element_after (v_doc,
                                      v_managed_devices,
                                      'mtos:managedElement');
      ELSE
         /* For request/response we will create XMLs from managedElements */
         v_managed_devices :=
            dom.create_element_after (v_doc,
                                      xmldom.makenode (v_doc),
                                      'mtos:managedElement');
      END IF;


      -- v_managed_devices := dom.create_element_after (v_doc, p_node,'managedElement');
      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'mtos:userLabel',
                                          v_cust_host_name);
      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'mtos:resourceState',
                                          'INSTALLED');
      v_name :=
         dom.create_element_after (v_doc, v_managed_devices, 'mtos:name');
      v_name := dom.create_element_after (v_doc, v_name, 'mtos:name');
      v_name := dom.create_element_after (v_doc, v_name, 'mtos:rdn');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mtos:type',
                                          'ME');
      v_name :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mtos:value',
                                             p_md_id);    -- managed device id
      v_name :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'mtos:aliasNameList');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'stru:attributeName',
                                          'BFGDeviceId');
      v_name :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'stru:attributeValue',
                                             v_bfg_ntn_id); -- BFG NTN ID for the device
      v_name :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'mtos:aliasNameList');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'stru:attributeName',
                                          'SysObjectID');
      v_name :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'stru:attributeValue',
                                             v_sysobjectid); -- SysObject ID for the device



      v_name :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'mtos:additionalInfo');



      /**************************For EDW Added by Ramyajit on 06/10/2010********************/
      IF (LOWER (p_Destination_Id) = ('edw'))
      THEN
         create_nvs (v_doc,
                     'Vas_Product_Name',
                     v_vas_product_name,
                     v_name);                             --- Vas Product Name

         create_nvs (v_doc,
                     'Vas_Cease_Date',
                     v_vas_cease_date,
                     v_name);                                -- Vas Cease Date
      END IF;

      /**************************For EDW End********************/

      create_nvs (v_doc,
                  'ClientGroupID',
                  v_cg_id,
                  v_name);                                  -- Client group ID
      create_nvs (v_doc,
                  'Read_CS',
                  v_read_cs,
                  v_name);             -- Read Community String for the device
      create_nvs (v_doc,
                  'Write_CS',
                  v_write_cs,
                  v_name);            -- Write community string for the device
      create_nvs (v_doc,
                  'CustomerId',
                  v_bfg_cus_id,
                  v_name);                   -- BFG customer ID for the device
      create_nvs (v_doc,
                  'CustomerName',
                  v_cus_name,
                  v_name);                     -- Customer name for the device
      --Added as part of Ontario Server Reporting for TNR011
      create_nvs (v_doc,
                  'BFG_PRODUCT_TYPE',
                  v_bfg_product_type,
                  v_name);                  -- BFG Product Type for the device
      --Add Ended
      --Added as part of IWAN Performance reporting (Andrew)
      create_nvs (v_doc,
                  'NTN_ROLE',
                  v_ntn_role,
                  v_name);                  -- NTN role for the device
      --Add Ended
      create_nvs (v_doc,
                  'CustomerNetworkCircleName',
                  v_net_name,
                  v_name);                      -- Network Name for the device
      create_nvs (v_doc,
                  'ContractID',
                  v_contract_id,
                  v_name);                       -- Contract id for the device
      create_nvs (v_doc,
                  'DeviceService',
                  v_cdsv_descr,
                  v_name);                    -- Device Service for the device
      create_nvs (v_doc,
                  'Prop_Status',
                  v_status_descr,
                  v_name);                     -- Device status for the device

      /*Added as part of IPSLA Changes on 21/01/2011*/
      /*Modified by Ramyajit Halder as part of IPSLA NETREPSOLSTICE changes*/
      IF (       LOWER (p_Destination_Id)  IN ('ontario','w4n','eyelo')
             AND p_entity IN ('D', 'P')
          OR (LOWER (p_Destination_Id) = ( ('netrepsolstice'))))
      THEN
         create_probes (v_doc,
                        p_md_id,
                        p_test_id,
                        p_operation,
                        v_managed_devices);
      END IF;

      /*Add Ended as part of IPSLA CHanges on 21/01/2011*/

      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'mtos:usage',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'mtos:capacity',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'mtos:networkAccessDomain',
                                          v_management_domain); -- primary management domain for the device
      --  dom.create_element_with_text_after(v_doc,v_managed_devices,'mtos:usage','');
      --  dom.create_element_with_text_after(v_doc,v_managed_devices,'mtos:capacity','');
      v_name :=
         dom.create_element_after (v_doc, v_managed_devices, 'mtos:location');

      v_tmp :=
         dom.create_element_after (v_doc,
                                   v_name,
                                   'plac:addressIdentifierList');
      v_tmp_1 :=
         dom.create_element_after (v_doc, v_tmp, 'plac:addressIdentifier');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp_1,
                                          'plac:name',
                                          'Site');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp_1,
                                          'plac:value',
                                          v_bfg_site_name);   -- BFG site name
      dom.create_element_with_text_after (v_doc,
                                          v_tmp_1,
                                          'plac:id',
                                          v_bfg_site_id);       -- BFG site id
      --  v_tmp := dom.create_element_after(v_doc,v_name,'plac:addressIdentifierList');
      v_tmp :=
         dom.create_element_after (v_doc, v_tmp, 'plac:addressIdentifier');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'plac:name',
                                          'Region');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'plac:value',
                                          ''); -- Current keeping region name as null
      v_tmp :=
         dom.create_element_with_text_after (v_doc,
                                             v_tmp,
                                             'plac:id',
                                             v_region_code);    -- Region Code

      v_name :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'mtos:meVendorExtensions');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mtos:operationalState',
                                          v_snmp_flag); -- activated flag to indicate whether snmp polling is enabled or not
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mtos:trsArea',
                                          '');
      v_tmp :=
         dom.create_element_after (v_doc, v_name, 'mtos:forecastActualDates');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:forecastCommissionStartDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:actualCommissionStartDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:forecastInstalledDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:actualInstalledDate',
                                          v_create_date); -- Create date for the device
      dom.create_element_with_text_after (
         v_doc,
         v_tmp,
         'mtos:forecastDecomissionStartDate',
         '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:actualDecomissionStartDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:forecastRetiredDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:actualRetiredDate',
                                          v_ceased_date); -- Ceased date for the device
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:capacityRequiredDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:forecastCompletionDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:actualCompletionDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:expectedCompletionDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:requestedCompletionDate',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:lastModificationDate',
                                          v_modified_date); -- last modified date for the device
      v_tmp :=
         dom.create_element_after (v_doc, v_name, 'mtos:managementIPAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:ipValue',
                                          v_ip_address); -- management ip address for the device
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:dnsName',
                                          v_host_name); -- management host name for the device
      v_tmp :=
         dom.create_element_after (v_doc, v_name, 'mtos:managementIPAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:ipValue',
                                          v_customer_ip_address); -- customer ip address for the device
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:ipType',
                                          'CustomerIP');

      v_tmp :=
         dom.create_element_after (v_doc, v_name, 'mtos:osMeInventoryType');
      --  v_tmp := dom.create_element_after(v_doc,v_tmp,'osInventoryType');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:inventoryType',
                                          v_dt_descr);          -- Device Type
      --  dom.create_element_with_text_after(v_doc,v_tmp,'mtos:inventoryUsage',v_dr_descr); -- Device Role
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:inventoryModel',
                                          v_model); -- Device Model - bfg-ndp-name
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mtos:inventoryUsage',
                                          v_dr_descr);          -- Device Role

      --dom.create_element_with_text_after(v_doc,v_name,'mtos:serviceState','');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mtos:network',
                                          v_network_type);     -- Network type
      v_name :=
         dom.create_element_after (v_doc, v_managed_devices, 'mtos:ptpList');

      /*Added by Ramyajit on 15/03/2011 as part of IPSLA-NETREPSOLSTICE changes*/

      IF (   LOWER (p_Destination_Id) = ( ('ontario'))
          OR (LOWER (p_Destination_Id) = ( ('edw')))
          OR (LOWER (p_Destination_Id) = ( ('w4n')))    --Added by Shahrul Z onb 30/06/2015 to resolve missing interface info for w4n notification
          OR (LOWER (p_Destination_Id) = ( ('eyelo'))))
      THEN
         --Martand 29/03/2012 - For sending all interfaces in device level xml when device cease operation happens. For Device Add and modify no interfaces
         IF (p_entity = 'D' AND p_operation in ('U','I'))
         THEN
            v_Interface_id := 0;
         ELSE
            v_Interface_id := p_interface_id;
         END IF;

         create_ptps (v_doc,
                      v_name,
                      p_md_id,
                      v_Interface_id,
                      p_operation);
      END IF;


      DBMS_LOB.createtemporary (v_output_xml, TRUE);
      dom.get_xml (v_doc, v_output_xml);
      dom.free_document (v_doc);

      RETURN v_output_xml;
   END CREATE_MLI_RESPONSE;

   /******************END FUNCTION CREATE_MLI_RESPONSE***********************/
   /*****************Start Function CREATE_MLI_5_0_RESPONSE******************/

   FUNCTION CREATE_MLI_5_0_RESPONSE (
      p_msg_id           IN NUMBER,
      p_md_id            IN NUMBER,
      p_operation        IN VARCHAR DEFAULT NULL,
      p_type             IN VARCHAR DEFAULT NULL,
      p_interface_id     IN NUMBER DEFAULT NULL,
      p_Destination_Id   IN VARCHAR DEFAULT NULL,
      p_test_id          IN NUMBER DEFAULT NULL,
      p_entity           IN VARCHAR DEFAULT NULL,
      p_hc_id            IN NUMBER DEFAULT NULL,
      p_Salsa_Id         IN VARCHAR DEFAULT NULL,
      p_foi_id           IN NUMBER)
      RETURN CLOB
   IS
      v_output_xml               CLOB;
      v_doc                      xmlDom.domDocument := xmldom.newDomdocument;
      v_managed_devices          xmlDom.domNode;
      v_name                     xmlDom.domNode;
      v_ptp                      xmlDom.domNode;
      v_tmp                      xmlDom.domNode;
      v_tmp_1                    xmlDom.domNode;
      v_md_id                    managed_Devices.id%TYPE;
      v_host_name                managed_devices.host_name%TYPE;
      v_cg_id                    managed_devices.net_cg_id%TYPE;
      v_ip_address               managed_devices.ip_address%TYPE;
      v_customer_ip_address      managed_devices.customer_ip_address%TYPE;
      v_cus_name                 managed_devices.cus_name%TYPE;
      v_net_name                 managed_devices.net_name%TYPE;
      v_bfg_ntn_id               managed_devices.bfg_ntn_id%TYPE;
      v_bfg_site_id              BFG_SITES.SIT_ID%TYPE;
      v_bfg_site_name            BFG_SITES.SIT_NAME%TYPE;
      v_lc_key                   managed_devices.lc_key%TYPE;
      v_modified_date            VARCHAR2 (30);

      v_sysobjectid              managed_Devices.sysobjectid%TYPE;
      v_cdsv_key                 managed_devices.cdsv_key%TYPE;
      v_net_id                   managed_devices.net_id%TYPE;
      v_cust_host_name           managed_devices.customer_host_name%TYPE;
      v_dt_key                   managed_devices.dt_key%TYPE;
      v_dr_key                   managed_devices.dr_key%TYPE;

      v_create_date              VARCHAR2 (30);
      v_ceased_date              VARCHAR2 (30);

      v_cus_id                   managed_devices.cus_id%TYPE;
      v_device_operation         VARCHAR2 (50) := 'updateInventory';
      v_management_domain        VARCHAR2 (4000);
      v_region_code              VARCHAR2 (4000);
      v_bfg_cus_id               customers.bfg_cus_id%TYPE;
      v_read_cs                  networks.read_cs%TYPE;
      v_write_cs                 networks.write_cs%TYPE;
      v_network_type             network_types.description%TYPE;
      v_dt_descr                 device_types.description%TYPE;
      v_dr_descr                 device_roles.description%TYPE;
      v_cdsv_descr               concord_device_service.description%TYPE;
      v_status_descr             log_classes.description%TYPE;
      v_snmp_flag                VARCHAR2 (30);
      v_model                    managed_devices.bfg_ndp_name%TYPE;
      v_contract_id              bfg_network_nodes.ntn_con_id%TYPE;
      /*********************For EDW Start Added by Ramyajit on 06/10/2010************************************************/
      v_vas_product_name         bfg_feature_options.feo_name%TYPE;
      v_vas_cease_date           VARCHAR2 (30);
      /*********************For EDW End**************************************************/
      v_prob_state               VARCHAR2 (50) := NULL;
      v_prob_test_name           saa_tests.description%TYPE;
      v_prob_test_type           saa_test_types.description%TYPE;
      v_prob_test_protocol       domain_values.meaning%TYPE;
      v_prob_source_port_no      parameter_values.VALUE%TYPE;
      v_prob_source_ip_address   parameter_values.VALUE%TYPE;
      v_prob_target_ip_address   parameter_values.VALUE%TYPE;
      v_prob_target_port_no      parameter_values.VALUE%TYPE;
      v_prob_test_freq           parameter_values.VALUE%TYPE;
      v_prob_packets_count       parameter_values.VALUE%TYPE;
      v_prob_service_class       parameter_values.VALUE%TYPE;
      v_prob_test_start_time     parameter_values.VALUE%TYPE;
      v_prob_test_life           parameter_values.VALUE%TYPE;
      v_prob_packet_size         parameter_values.VALUE%TYPE;
      v_prob_packet_interval     parameter_values.VALUE%TYPE;
      v_header                   xmlDom.domNode;
      v_ptp1                     xmlDom.domNode;
      v_date                     xmlDom.domNode;
      v_tmp1                     xmlDom.domNode;
      v_ptmp                     xmlDom.domNode;
      v_rdn                      xmlDom.domNode;
      v_names                    xmlDom.domNode;
      v_serial_number            chassis_hardware.serial_number%TYPE;
      v_mac_address              Managed_Devices.COLLECTED_MAC_ADDRESS%TYPE;
      v_collect_serial_number    Managed_Devices.COLLECTED_SERIAL_NO%TYPE;

      v_Interface_Desc           VARCHAR2 (4000) := NULL;
      --Added as part of Ontario Server Reporting TNR011
      v_bfg_product_type         BFG_NODE_PRODUCT_TYPES.NDT_NAME%TYPE;
--      Added as part of NMDB MLI to VDC NCM change 
      v_partner_friendly_name    BFG_NETWORK_NODES.NTN_PARTNER_FRIENDLY_NAME%TYPE;
      --Added Ended

      PROCEDURE create_header (p_doc      IN XMLDOM.DOMDOCUMENT,
                               v_header   IN xmlDom.domNode)
      IS
      BEGIN
         v_tmp :=
            dom.create_element_after (v_doc, v_header, 'head:standardHeader');
         v_tmp_1 := dom.create_element_after (v_doc, v_tmp, 'head:e2e');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:E2EDATA',
                                             '');
         v_tmp_1 :=
            dom.create_element_after (v_doc, v_tmp, 'head:serviceState');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:stateCode',
                                             'OK');
         /*dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorCode','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorDesc','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorText','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorTrace','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:resendIndicator','true');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:retriesRemaining','0');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:retryInterval','0');*/
         v_tmp_1 :=
            dom.create_element_after (v_doc, v_tmp, 'head:serviceAddressing');
         dom.create_element_with_text_after (
            v_doc,
            v_tmp_1,
            'head:from',
            'http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');
         v_ptp := dom.create_element_after (v_doc, v_tmp_1, 'head:to');
         dom.create_element_with_text_after (
            v_doc,
            v_ptp,
            'head:address',
               'http://capabilities.nat.bt.com/ManageLogicalInventory/'
            || p_Salsa_Id);
         /*v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItemList');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItem');*/
         v_ptp := dom.create_element_after (v_doc, v_tmp_1, 'head:replyTo');
         dom.create_element_with_text_after (
            v_doc,
            v_ptp,
            'head:address',
            'http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');
         /*v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItemList');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItem');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:relatesTo','EDW');/*v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:faultTo');dom.create_element_with_text_after(v_doc,v_ptp,'head:address','http://www.altova.com');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItemList');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItem');*/
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:messageId',
                                             'MLI/' || p_msg_id);
         dom.create_element_with_text_after (
            v_doc,
            v_tmp_1,
            'head:serviceName',
            'http://capabilities.nat.bt.com/ManageLogicalInventory');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:action',
                                             'inventoryNotification');
         /*v_tmp_1 := dom.create_element_after(v_doc, v_tmp, 'head:serviceProperties');v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:messageExpiry');dom.create_element_with_text_after(v_doc,v_ptp,'head:expiryTime','');dom.create_element_with_text_after(v_doc,v_ptp,'head:expiryAction','');v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:messageDelivery');dom.create_element_with_text_after(v_doc,v_ptp,'head:messagePersistence','');dom.create_element_with_text_after(v_doc,v_ptp,'head:messageRetries','');dom.create_element_with_text_after(v_doc,v_ptp,'head:messageRetryInterval','');dom.create_element_with_text_after(v_doc,v_ptp,'head:messageQoS','');*/
         v_tmp_1 :=
            dom.create_element_after (v_doc,
                                      v_tmp,
                                      'head:serviceSpecification');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:payloadFormat',
                                             'XML');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:version',
                                             '5.0');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:revision',
                                             '');
      /*v_tmp_1 := dom.create_element_after(p_doc, v_tmp, 'head:serviceSecurity');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:id','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:role','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:type','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:authenticationLevel','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:authenticationToken','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:userEntitlements','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:tokenExpiry','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:callingApplication','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:callingApplicationCredentials','');*/
      END create_header;

      PROCEDURE create_ptps (p_doc            IN XMLDOM.DOMDOCUMENT,
                             p_node           IN XMLDOM.DOMNODE,
                             p_md_id          IN NUMBER,
                             p_interface_id   IN NUMBER,
                             p_operation      IN VARCHAR)
      IS
         v_ptp               xmlDom.domNode;
         v_tmp               xmlDom.domNode;
         v_management_type   VARCHAR2 (4000);
         v_interface_oper    VARCHAR2 (50) := NULL;
      BEGIN
         FOR rec
            IN (SELECT id,
                       port,
                       name,
                       label,
                       configured_bandwidth,
                       actual_bandwidth,
                       duplex,
                       TO_CHAR (cease_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                          cease_date,
                       TO_CHAR (modified_date,
                                'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                          modified_date,
                       management_type,
                       domain
                  FROM interfaces
                 WHERE md_id = p_md_id)
         LOOP
            BEGIN
               SELECT NVL (domain.get_meaning ('INM', rec.management_type),
                           '')
                 INTO v_management_type
                 FROM DUAL;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;

            v_interface_oper := NULL;

            IF NVL (p_interface_id, 0) = rec.id
            /* The current interface is added , updated or ceased */
            THEN
               /* Decode the operation */
               IF p_operation = 'I'
               THEN
                  v_interface_oper := 'interfaceAdded';
               ELSIF p_operation = 'U'
               THEN
                  v_interface_oper := 'interfaceUpdated';
               ELSE
                  v_interface_oper := 'interfaceCeased';
               END IF;
            END IF;

            BEGIN
               SELECT mib.get_interface_mib_entry (rec.id,
                                                   '1.3.6.1.2.1.2.2.1.2')
                 INTO v_Interface_Desc
                 FROM DUAL;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;

            IF (    LOWER (p_Destination_Id) = ('edw')
                AND p_interface_id IS NOT NULL
                AND rec.port IS NULL)
            THEN
               rec.port := 99999;
            END IF;


            v_tmp1 := dom.create_element_after (v_doc, v_ptmp, 'mlidata:ptp');
            v_rdn := dom.create_element_after (v_doc, v_tmp1, 'mlidata:name');
            v_name := dom.create_element_after (v_doc, v_rdn, 'mlidata:rdn');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:type',
                                                'PTP');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.port);
            dom.create_element_with_text_after (v_doc,
                                                v_tmp1,
                                                'mlidata:id',
                                                rec.id);
            dom.create_element_with_text_after (v_doc,
                                                v_tmp1,
                                                'mlidata:userLabel',
                                                rec.label);
            dom.create_element_with_text_after (v_doc,
                                                v_tmp1,
                                                'mlidata:source',
                                                'NETWORK_EMS');
            dom.create_element_with_text_after (v_doc,
                                                v_tmp1,
                                                'mlidata:resourceState',
                                                'INSTALLED');
            dom.create_element_with_text_after (v_doc,
                                                v_tmp1,
                                                'mlidata:serviceState',
                                                'IN_SERVICE');
            v_tmp :=
               dom.create_element_after (v_doc,
                                         v_tmp1,
                                         'mlidata:resourceDates');

            IF (rec.cease_date IS NOT NULL)
            THEN
               v_date :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:resourceDate');
               dom.create_element_with_text_after (v_doc,
                                                   v_date,
                                                   'mlidata:dateType',
                                                   'ACTUAL_DATE');
               dom.create_element_with_text_after (v_doc,
                                                   v_date,
                                                   'mlidata:resourceState',
                                                   'RETIRED');
               dom.create_element_with_text_after (v_doc,
                                                   v_date,
                                                   'mlidata:dateTime',
                                                   rec.cease_date);
            END IF;

            IF (rec.modified_date IS NOT NULL)
            THEN
               v_date :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:resourceDate');
               dom.create_element_with_text_after (v_doc,
                                                   v_date,
                                                   'mlidata:dateType',
                                                   'LAST_MODIFIED_DATE');
               dom.create_element_with_text_after (v_doc,
                                                   v_date,
                                                   'mlidata:resourceState',
                                                   'INSTALLED');
               dom.create_element_with_text_after (v_doc,
                                                   v_date,
                                                   'mlidata:dateTime',
                                                   rec.modified_date);
            END IF;

            v_tmp :=
               dom.create_element_after (v_doc, v_tmp1, 'mlidata:aliasNames');
            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:aliasName');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'interfacename');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.name);
            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:aliasName');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'PortID');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.id);
            dom.create_element_with_text_after (v_doc,
                                                v_tmp1,
                                                'mlidata:direction',
                                                'BIDIRECTIONAL');
            v_ptp :=
               dom.create_element_after (v_doc,
                                         v_tmp1,
                                         'mlidata:transmissionParameters');
            v_name :=
               dom.create_element_after (v_doc,
                                         v_ptp,
                                         'mlidata:TransmissionParameters');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:layerRate',
                                                'LR_DSL');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:bandwidth',
                                                '');
            v_tmp :=
               dom.create_element_after (v_doc, v_name, 'mlidata:parameters');
            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:parameter');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'DataRate');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                '');

            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:parameter');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'RU_DataRate');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                '');

            v_name :=
               dom.create_element_after (v_doc,
                                         v_ptp,
                                         'mlidata:TransmissionParameters');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:layerRate',
                                                'LR_Not_Applicable');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:bandwidth',
                                                '');
            v_tmp :=
               dom.create_element_after (v_doc, v_name, 'mlidata:parameters');
            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:parameter');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'AdministrativeSpeedRate');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.configured_bandwidth);
            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:parameter');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'ActualSpeedRate');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.actual_bandwidth);
            v_name :=
               dom.create_element_after (v_doc, v_tmp, 'mlidata:parameter');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'DuplexMode');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.duplex);

            v_name :=
               dom.create_element_after (v_doc,
                                         v_tmp1,
                                         'mlidata:ptpVendorExtensions');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:mtosiVersion',
                                                '');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:extVersion',
                                                '');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:extAuthor',
                                                '');
            v_tmp :=
               dom.create_element_after (v_doc,
                                         v_name,
                                         'mlidata:additionalInfo');
            v_name :=
               dom.create_element_after (v_doc,
                                         v_tmp,
                                         'mlidata:additionalInfo');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'IFDomain');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                rec.domain);
            v_name :=
               dom.create_element_after (v_doc,
                                         v_tmp,
                                         'mlidata:additionalInfo');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'Usage');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                v_management_type);
            v_name :=
               dom.create_element_after (v_doc,
                                         v_tmp,
                                         'mlidata:additionalInfo');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'InterfaceDescription');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                v_Interface_Desc);

            v_name :=
               dom.create_element_after (v_doc,
                                         v_tmp,
                                         'mlidata:additionalInfo');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:key',
                                                'PTPOperation');
            dom.create_element_with_text_after (v_doc,
                                                v_name,
                                                'mlidata:value',
                                                v_interface_oper);
         END LOOP;
      END create_ptps;

      PROCEDURE create_probes (p_doc               IN XMLDOM.DOMDOCUMENT,
                               p_md_id             IN NUMBER,
                               p_test_id           IN NUMBER,
                               p_operation         IN VARCHAR,
                               p_managed_devices   IN XMLDOM.DOMNODE)
      IS
         p_name    xmlDom.domNode;
         p_name1   xmlDom.domNode;
      BEGIN
         --p_name := dom.create_element_after(p_doc,p_managed_devices,'mtos:additionalInfo');
         /*Modifed for TNR013 MLI 5.0 Netrep by Ramyajit*/
         IF (p_test_id IS NOT NULL)
         THEN
            /*Modified ended for TNR013 MLI 5.0 Netrep by Ramyajit*/
            /*Added as part of IPSLA Changes*/
            FOR crec IN (SELECT ID,
                                TEST_NAME,
                                TEST_TYPE,
                                TEST_PROTOCOL,
                                SOURCE_PORT,
                                SOURCE_IP_ADDRESS,
                                TARGET_IP_ADDRESS,
                                TARGET_PORT,
                                TEST_FREQUENCY,
                                NO_OF_PACKETS,
                                SERVICE_CLASS,
                                TEST_START_TIME,
                                TEST_LIFE,
                                PACKETS_SIZE,
                                PACKETS_INTERVAL,
                                TARGET_URL
                           FROM mli_probes
                          WHERE md_id_source = p_md_id AND id = p_test_id)
            LOOP
               /*Add Ended as part of IPSLA CHnages*/
               -- v_name := dom.create_element_after(v_doc,v_managed_devices,'mtos:additionalInfo');
               /*Added as part of IPSLA changes*/
               IF NVL (p_test_id, 0) = crec.id
               THEN
                  /* The current probe is added , updated or ceased */
                  IF p_operation = 'I'
                  THEN
                     v_prob_state := 'ProbeCreated';
                  ELSIF p_operation = 'U'
                  THEN
                     v_prob_state := 'ProbeUpdated';
                  ELSE
                     v_prob_state := 'ProbeCeased';
                  END IF;
               END IF;

               v_name :=
                  dom.create_element_after (v_doc, v_ptp, 'mlidata:probes');
               v_name :=
                  dom.create_element_after (v_doc, v_name, 'mlidata:probe');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testID',
                                                   crec.id);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testName',
                                                   crec.test_name);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testType',
                                                   crec.test_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testProtocol',
                                                   crec.test_protocol);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:sourceIPAddress',
                                                   crec.source_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:sourcePortNumber',
                  crec.source_port);

               IF (crec.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (
                     v_doc,
                     v_name,
                     'mlidata:targetIPAddress',
                     crec.target_ip_address || '_' || crec.TARGET_URL);
               ELSE
                  dom.create_element_with_text_after (
                     v_doc,
                     v_name,
                     'mlidata:targetIPAddress',
                     crec.target_ip_address);
               END IF;

               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:targetPortNumber',
                  crec.target_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:frequency',
                                                   crec.test_frequency);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:serviceClass',
                                                   crec.service_class);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:startTime',
                                                   crec.test_start_time);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testLife',
                                                   crec.test_life);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetCount',
                                                   crec.NO_OF_PACKETS);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetSize',
                                                   crec.packets_size);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetInterval',
                                                   crec.packets_interval);
            END LOOP;

            FOR crec1 IN (SELECT ID,
                                 TEST_NAME,
                                 TEST_TYPE,
                                 TEST_PROTOCOL,
                                 SOURCE_PORT,
                                 SOURCE_IP_ADDRESS,
                                 TARGET_IP_ADDRESS,
                                 TARGET_PORT,
                                 TEST_FREQUENCY,
                                 NO_OF_PACKETS,
                                 SERVICE_CLASS,
                                 TEST_START_TIME,
                                 TEST_LIFE,
                                 PACKETS_SIZE,
                                 PACKETS_INTERVAL,
                                 TARGET_URL
                            FROM mli_probes_deleted
                           WHERE id = p_test_id)
            LOOP
               v_prob_state := 'ProbeCeased';
               v_name :=
                  dom.create_element_after (v_doc, v_ptp, 'mlidata:probes');
               v_name :=
                  dom.create_element_after (v_doc, v_name, 'mlidata:probe');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testID',
                                                   crec1.id);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testName',
                                                   crec1.test_name);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testType',
                                                   crec1.test_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testProtocol',
                                                   crec1.test_protocol);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:sourceIPAddress',
                                                   crec1.source_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:sourcePortNumber',
                  crec1.source_port);

               IF (crec1.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (
                     v_doc,
                     v_name,
                     'mlidata:targetIPAddress',
                     crec1.target_ip_address || '_' || crec1.TARGET_URL);
               ELSE
                  dom.create_element_with_text_after (
                     v_doc,
                     v_name,
                     'mlidata:targetIPAddress',
                     crec1.target_ip_address);
               END IF;

               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:targetPortNumber',
                  crec1.target_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:frequency',
                                                   crec1.test_frequency);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:serviceClass',
                                                   crec1.service_class);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:startTime',
                                                   crec1.test_start_time);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testLife',
                                                   crec1.test_life);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetCount',
                                                   crec1.NO_OF_PACKETS);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetSize',
                                                   crec1.packets_size);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetInterval',
                                                   crec1.packets_interval);
            END LOOP;
         END IF;

         /*Added for TNR013 MLI 5.0 Netrep by Ramyajit*/
         IF (p_test_id IS NULL AND p_operation IN ('I', 'D'))
         THEN
            IF p_operation = 'I'
            THEN
               v_prob_state := 'ProbeCreated';
            ELSE
               v_prob_state := 'ProbeCeased';
            END IF;

            v_name :=
               dom.create_element_after (v_doc, v_ptp, 'mlidata:probes');

            FOR crec2 IN (SELECT ID,
                                 TEST_NAME,
                                 TEST_TYPE,
                                 TEST_PROTOCOL,
                                 SOURCE_PORT,
                                 SOURCE_IP_ADDRESS,
                                 TARGET_IP_ADDRESS,
                                 TARGET_PORT,
                                 TEST_FREQUENCY,
                                 NO_OF_PACKETS,
                                 SERVICE_CLASS,
                                 TEST_START_TIME,
                                 TEST_LIFE,
                                 PACKETS_SIZE,
                                 PACKETS_INTERVAL,
                                 TARGET_URL
                            FROM mli_probes
                           WHERE md_id_source = p_md_id)
            LOOP
               --v_name := dom.create_element_after(v_doc, v_name,'mlidata:probes');
               v_tmp1 :=
                  dom.create_element_after (v_doc, v_name, 'mlidata:probe');
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testID',
                                                   crec2.id);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testName',
                                                   crec2.test_name);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testType',
                                                   crec2.test_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testProtocol',
                                                   crec2.test_protocol);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:sourceIPAddress',
                                                   crec2.source_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_tmp1,
                  'mlidata:sourcePortNumber',
                  crec2.source_port);

               IF (crec2.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (
                     v_doc,
                     v_tmp1,
                     'mlidata:targetIPAddress',
                     crec2.target_ip_address || '_' || crec2.TARGET_URL);
               ELSE
                  dom.create_element_with_text_after (
                     v_doc,
                     v_tmp1,
                     'mlidata:targetIPAddress',
                     crec2.target_ip_address);
               END IF;

               dom.create_element_with_text_after (
                  v_doc,
                  v_tmp1,
                  'mlidata:targetPortNumber',
                  crec2.target_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:frequency',
                                                   crec2.test_frequency);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:serviceClass',
                                                   crec2.service_class);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:startTime',
                                                   crec2.test_start_time);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testLife',
                                                   crec2.test_life);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:packetCount',
                                                   crec2.NO_OF_PACKETS);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:packetSize',
                                                   crec2.packets_size);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:packetInterval',
                                                   crec2.packets_interval);
            END LOOP;
         END IF;
      /*Added Ended for TNR013 MLI 5.0 Netrep by Ramyajit*/
      END create_probes;

   BEGIN
      SELECT id,
             host_name,
             net_cg_id,
             ip_address,
             customer_ip_address,
             cus_name,
             net_name,
             bfg_ntn_id,
             lc_key,
             TO_CHAR (modified_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                modified_date,
             sysobjectid,
             cdsv_key,
             net_id,
             customer_host_name,
             dt_key,
             dr_key,
             TO_CHAR (create_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                create_date,
             TO_CHAR (ceased_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                ceased_date,
             cus_id,
             DECODE (activated, 'Y', 'Y', 'N'),
             bfg_ndp_name,
             COLLECTED_MAC_ADDRESS,
             COLLECTED_SERIAL_NO
        INTO v_md_id,
             v_host_name,
             v_cg_id,
             v_ip_address,
             v_customer_ip_address,
             v_cus_name,
             v_net_name,
             v_bfg_ntn_id,
             v_lc_key,
             v_modified_date,
             v_sysobjectid,
             v_cdsv_key,
             v_net_id,
             v_cust_host_name,
             v_dt_key,
             v_dr_key,
             v_create_date,
             v_ceased_date,
             v_cus_id,
             v_snmp_flag,
             v_model,
             v_mac_address,
             v_collect_serial_number
        FROM managed_Devices md
       WHERE id = p_md_id;

      BEGIN
          SELECT SIT_ID, SIT_NAME into v_bfg_site_id, v_bfg_site_name
          FROM bfg_network_nodes ntn, bfg_sites sit WHERE ntn.ntn_sit_id=sit.sit_id and ntn.ntn_id = v_bfg_ntn_id;
       EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            SELECT cs_id, bfg_site_name into v_bfg_site_id, v_bfg_site_name
            FROM managed_Devices md
            WHERE id = p_md_id;
       END;
      
      IF    (p_interface_id IS NOT NULL AND v_lc_key = 'CSD')
         OR (p_test_id IS NOT NULL AND v_lc_key = 'CSD')
         OR (p_hc_id IS NOT NULL AND v_lc_key = 'CSD')
      THEN
         v_output_xml := NULL;
         RETURN v_output_xml;
      END IF;

      BEGIN
         SELECT net.read_cs, net.write_cs, nt.description
           INTO v_read_cs, v_write_cs, v_network_type
           FROM networks net, network_types nt
          WHERE id = v_net_id AND nt.key = net.nt_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT bfg_cus_id
           INTO v_bfg_cus_id
           FROM customers
          WHERE id = v_cus_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_dt_descr
           FROM device_types
          WHERE KEY = v_dt_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_dr_descr
           FROM device_roles
          WHERE KEY = v_dr_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_cdsv_descr
           FROM concord_device_service
          WHERE KEY = v_cdsv_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_status_descr
           FROM log_classes
          WHERE KEY = v_lc_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT NVL (management_domain.GET_MD_MGMT_DOMAIN (p_md_id, 1), '')
           INTO v_management_domain
           FROM DUAL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT ntn_con_id, ntn_partner_friendly_name
           INTO v_contract_id, v_partner_friendly_name
           FROM bfg_network_nodes
          WHERE ntn_id = v_bfg_ntn_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT NVL (region.get_region_code (v_bfg_ntn_id), '')
           INTO v_region_code
           FROM DUAL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT serial_number
           INTO v_serial_number
           FROM chassis_hardware
          WHERE id = p_hc_id AND md_id = p_md_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      --Added as part of Ontario server Reporting TNR011
      BEGIN
         SELECT BNPT.NDT_NAME BFG_PRODUCT_TYPE
           INTO v_bfg_product_type
           FROM BFG_NETWORK_NODES BFG_NET,
                BFG_NODE_PRODUCTS BNP,
                BFG_NODE_PRODUCT_TYPES BNPT
          WHERE     BFG_NET.NTN_NDP_ID = BNP.NDP_ID
                AND BNP.NDP_NDT_ID = BNPT.NDT_ID
                AND BFG_NET.NTN_ID = v_bfg_ntn_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      --Add Ended

      /********************For EDW start Added by Ramyajit on 06/102010******/
      /* If the feature option instances is modified, then it could be for a subscribed VAS product .
      Here the details of the vas product for the modified feo id need to be provided*/
      IF (NVL (p_foi_id, 0) <> 0)
      THEN
         BEGIN
            SELECT FEO_NAME,
                   TO_CHAR (FOI_CEASE_DATE, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
              INTO v_vas_product_name, v_vas_cease_date
              FROM BFG_FEATURE_OPTIONS, S_BFG_FEATURE_OPTION_INSTANCES
             WHERE FOI_ID = p_foi_id AND FOI_FEO_ID = FEO_ID;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
            WHEN TOO_MANY_ROWS
            THEN
               NULL;
         END;
      END IF;

      /********************For EDW END********/



      /**************added the device opreation on 03/05/2011***/
      IF (p_type = 'S')
      THEN
         /* Decode the operation */
         CASE p_operation
            WHEN 'I'
            THEN
               v_device_operation := 'addInventory';
            WHEN 'U'
            THEN
               v_device_operation := 'updateInventory';
            ELSE
               v_device_operation := 'ceaseInventory';
         END CASE;

         IF (   (NVL (p_interface_id, 0) > 0)
             OR (NVL (p_test_id, 0) > 0)
             OR (NVL (p_hc_id, 0) > 0))
         THEN
            v_device_operation := 'updateInventory';
         END IF;
      END IF;

      /**************add ended on 03/05/2011***************/
      v_header :=
         dom.create_element_after (v_doc,
                                   xmlDom.makeNode (v_doc),
                                   'mlidata:inventory');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xsi:schemaLocation',
         'http://collaborate.bt.com/svn/edm/pbp/mlidata/tags/5.0/ ManageLogicalInventoryData.xsd');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:mlidata',
         'http://collaborate.bt.com/svn/edm/pbp/mlidata/tags/5.0/');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:head',
         'http://wsi.nat.bt.com/2005/06/StandardHeader/');
      dom.create_attribute_for (v_doc,
                                v_header,
                                'xmlns:xsi',
                                'http://www.w3.org/2001/XMLSchema-instance');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:adli',
         'https://collaborate.bt.com/svn/edm/adli/IPAddress');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:ssp',
         'https://collaborate.bt.com/svn/edm/ssp/trunk/Address.xsd');


      create_header (v_doc, v_header);
      v_managed_devices :=
         dom.create_element_after (v_doc, v_header, 'logicalInventory');
      dom.create_attribute_for (v_doc,
                                v_managed_devices,
                                'messageType',
                                'Notification');
      v_managed_devices :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'managementDomains');
      v_name :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'mlidata:managementDomain');
      /* v_tmp             :=dom.create_element_after(v_doc,v_name,'mlidata:name');
       v_ptp             :=dom.create_element_after(v_doc,v_tmp,'mlidata:rdn');
       dom.create_element_with_text_after(v_doc,v_ptp,'mlidata:type','AID');
       dom.create_element_with_text_after(v_doc,v_ptp,'mlidata:value','String'); */
      v_tmp :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:id',
                                             '');
      v_tmp :=
         dom.create_element_after (v_doc, v_name, 'mlidata:managedElements');
      v_ptp :=
         dom.create_element_after (v_doc, v_tmp, 'mlidata:managedElement');
      v_ptp1 := dom.create_element_after (v_doc, v_ptp, 'mlidata:name');
      v_name := dom.create_element_after (v_doc, v_ptp1, 'mlidata:rdn');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:type',
                                          'ME');
      v_name :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:value',
                                             v_bfg_ntn_id);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:id',
                                          p_md_id);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:userLabel',
                                          v_cust_host_name);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:owner',
                                          'NMDB');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:source',
                                          'NETWORK_EMS');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:networkAccessDomain',
                                          v_management_domain);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:resourceState',
                                          'INSTALLED');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:serviceState',
                                          'IN_SERVICE');
      v_ptp1 :=
         dom.create_element_after (v_doc, v_ptp, 'mlidata:resourceDates');

      IF (v_create_date IS NOT NULL)
      THEN
         v_date :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:resourceDate');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateType',
                                             'ACTUAL_DATE');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:resourceState',
                                             'INSTALLED');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateTime',
                                             v_create_date);
      END IF;

      IF (v_ceased_date IS NOT NULL)
      THEN
         v_date :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:resourceDate');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateType',
                                             'ACTUAL_DATE');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:resourceState',
                                             'RETIRED');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateTime',
                                             v_ceased_date);
      END IF;

      IF (v_modified_date IS NOT NULL)
      THEN
         v_date :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:resourceDate');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateType',
                                             'LAST_MODIFIED_DATE');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:resourceState',
                                             'INSTALLED');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateTime',
                                             v_modified_date);
      END IF;

      v_ptp1 := dom.create_element_after (v_doc, v_ptp, 'mlidata:aliasNames');
      v_name := dom.create_element_after (v_doc, v_ptp1, 'mlidata:aliasName');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'BFGDeviceId');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_bfg_ntn_id);
      v_name := dom.create_element_after (v_doc, v_ptp1, 'mlidata:aliasName');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'SysObjectId');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_sysobjectid);
      v_name := dom.create_element_after (v_doc, v_ptp1, 'mlidata:aliasName');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'PartnerFriendlyName');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_partner_friendly_name);                                    
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:capacity',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:usage',
                                          '');
      v_name :=
         dom.create_element_after (v_doc, v_ptp, 'mlidata:logicalLocation');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:siteId',
                                          v_bfg_site_id);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:name',
                                          v_bfg_site_name);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:region',
                                          v_region_code);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:operationalState',
                                          '');
      --  IF (LOWER(p_Destination_Id) = (('ontario')) OR (LOWER(p_Destination_Id) = (('netrepsolstice')) AND p_entity in ('D','P'))) THEN
      --    create_probes(v_doc,p_md_id,p_test_id,p_operation,v_managed_devices);
      --  END IF;
      v_name :=
         dom.create_element_after (v_doc,
                                   v_ptp,
                                   'mlidata:relatedPhysicalResources');
      v_name :=
         dom.create_element_after (v_doc, v_name, 'mlidata:physicalResource');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:id',
                                          '');
      v_name := dom.create_element_after (v_doc, v_name, 'mlidata:aliasNames');
      v_name := dom.create_element_after (v_doc, v_name, 'mlidata:aliasName');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'DiscoveredChassisSerialNumber');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_collect_serial_number);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:meType',
                                          v_dt_descr);          ---Device Type
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:meModel',
                                          v_model);          ---BFG MOdel Name
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:meUsage',
                                          v_dr_descr);         ----Device Role
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:productName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:network',
                                          v_network_type);      --Network Type
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:QOS',
                                          'QOS');
      v_name :=
         dom.create_element_after (v_doc,
                                   v_ptp,
                                   'mlidata:meVendorExtensions');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:mtosiVersion',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:extVersion',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:extAuthor',
                                          '');
      v_tmp1 :=
         dom.create_element_after (v_doc, v_name, 'mlidata:additionalInfo');

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'ClientGroupID');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_cg_id);         ---Client Group Id

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'DeviceOperation');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_device_operation); --Device Operation

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'CustomerName');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_cus_name);         --Customer_Name

      --Added as part of Ontario server Reporting TNR011
      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'BFG PRODUCT TYPE');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_bfg_product_type); --BFG Product Type of The Device
      --Add Ended

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'CustomerNetworkCircleName');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_net_name); --Customer Network Circle Name
      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');

      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'Prop_Status');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_status_descr);     --Device Status

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'SNMP_Flag');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_snmp_flag);            --SNMP Flag


      v_name :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'ContractID');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_contract_id);    --BFG Contract Id

      v_name :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'CustomerId');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_bfg_cus_id);     --BFG Contract Id



      v_name :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'DeviceService');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_cdsv_descr);      --Device Service

      IF (LOWER (p_Destination_Id) = ('edw'))
      THEN
         v_tmp :=
            dom.create_element_after (v_doc,
                                      v_tmp1,
                                      'mlidata:additionalInfo');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp,
                                             'mlidata:key',
                                             'Vas_Product_Name');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp,
                                             'mlidata:value',
                                             v_vas_product_name);
         v_tmp :=
            dom.create_element_after (v_doc,
                                      v_tmp1,
                                      'mlidata:additionalInfo');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp,
                                             'mlidata:key',
                                             'Vas_Cease_Date');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp,
                                             'mlidata:value',
                                             v_vas_cease_date);
      END IF;

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'MACAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_mac_address);

      IF (p_hc_id IS NOT NULL)
      THEN
         v_ptp1 :=
            dom.create_element_after (v_doc,
                                      v_ptp,
                                      'mlidata:equipmentHolders');
         v_rdn :=
            dom.create_element_after (v_doc,
                                      v_ptp1,
                                      'mlidata:equipmentHolder');
         dom.create_element_with_text_after (v_doc,
                                             v_rdn,
                                             'mlidata:id',
                                             '');
         dom.create_element_with_text_after (v_doc,
                                             v_rdn,
                                             'mlidata:holderType',
                                             'SLOT');
         v_name :=
            dom.create_element_after (v_doc,
                                      v_rdn,
                                      'mlidata:equipmentHolders');
         v_ptp1 :=
            dom.create_element_after (v_doc,
                                      v_name,
                                      'mlidata:equipmentHolder');
         dom.create_element_with_text_after (v_doc,
                                             v_ptp1,
                                             'mlidata:id',
                                             '');
         dom.create_element_with_text_after (v_doc,
                                             v_ptp1,
                                             'mlidata:holderType',
                                             'SHELF');
         v_name :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:equipment');
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:id',
                                             '');
         v_ptp1 :=
            dom.create_element_after (v_doc,
                                      v_name,
                                      'mlidata:relatedPhysicalResources');
         v_name :=
            dom.create_element_after (v_doc,
                                      v_ptp1,
                                      'mlidata:physicalResource');
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:id',
                                             p_hc_id);
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:serialNumber',
                                             v_serial_number);
      END IF;

      --  IF (LOWER(p_Destination_Id) = (('ontario')) OR (LOWER(p_Destination_Id) = (('edw'))) OR (LOWER(p_Destination_Id) = (('netrepsolstice')))) THEN
      IF (   LOWER (p_Destination_Id) = ( ('ontario'))
          OR (LOWER (p_Destination_Id) = ( ('edw'))))
      THEN
         v_ptmp :=
            dom.create_element_after (v_doc,
                                      v_ptp,
                                      'mlidata:physicalTerminationPoints');
         create_ptps (v_doc,
                      v_ptmp,
                      p_md_id,
                      p_interface_id,
                      p_operation);
      END IF;

      v_names :=
         dom.create_element_after (v_doc,
                                   v_ptp,
                                   'mlidata:managementIPAddresses');
      v_name := dom.create_element_after (v_doc, v_names, 'mlidata:ipAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipValue',
                                          v_ip_address);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:dnsName',
                                          v_host_name);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:subnetworkMask',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ippool',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipType',
                                          '');
      v_name := dom.create_element_after (v_doc, v_names, 'mlidata:ipAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipValue',
                                          v_customer_ip_address);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:dnsName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:subnetworkMask',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ippool',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipType',
                                          'CustomerIP');
      DBMS_LOB.createtemporary (v_output_xml, TRUE);
      dom.get_xml (v_doc, v_output_xml);
      dom.free_document (v_doc);
      RETURN v_output_xml;
   END CREATE_MLI_5_0_RESPONSE;

   /*****************End  Function CREATE_MLI_5_0_RESPONSE******************/

   /*****************Start Function CREATE_MLI_6_0_RESPONSE*****************/

   FUNCTION CREATE_MLI_6_0_RESPONSE (
      p_msg_id           IN NUMBER,
      p_md_id            IN NUMBER,
      p_operation        IN VARCHAR DEFAULT NULL,
      p_type             IN VARCHAR DEFAULT NULL,
      p_interface_id     IN NUMBER DEFAULT NULL,
      p_Destination_Id   IN VARCHAR DEFAULT NULL,
      p_test_id          IN NUMBER DEFAULT NULL,
      p_entity           IN VARCHAR DEFAULT NULL,
      p_hc_id            IN NUMBER DEFAULT NULL,
      p_Salsa_Id         IN VARCHAR DEFAULT NULL,
      p_foi_id           IN NUMBER)
      RETURN CLOB
   IS
      v_output_xml               CLOB;
      v_doc                      xmlDom.domDocument := xmldom.newDomdocument;
      v_managed_devices          xmlDom.domNode;
      v_name                     xmlDom.domNode;
      v_ptp                      xmlDom.domNode;
      v_tmp                      xmlDom.domNode;
      v_tmp_1                    xmlDom.domNode;
      v_md_id                    managed_Devices.id%TYPE;
      v_host_name                managed_devices.host_name%TYPE;
      v_cg_id                    managed_devices.net_cg_id%TYPE;
      v_ip_address               managed_devices.ip_address%TYPE;
      v_customer_ip_address      managed_devices.customer_ip_address%TYPE;
      v_cus_name                 managed_devices.cus_name%TYPE;
      v_net_name                 managed_devices.net_name%TYPE;
      v_bfg_ntn_id               managed_devices.bfg_ntn_id%TYPE;
      v_bfg_site_id              BFG_SITES.SIT_ID%TYPE;
      v_bfg_site_name            BFG_SITES.SIT_NAME%TYPE;
      v_lc_key                   managed_devices.lc_key%TYPE;
      v_modified_date            VARCHAR2 (30);

      v_sysobjectid              managed_Devices.sysobjectid%TYPE;
      v_cdsv_key                 managed_devices.cdsv_key%TYPE;
      v_net_id                   managed_devices.net_id%TYPE;
      v_cust_host_name           managed_devices.customer_host_name%TYPE;
      v_dt_key                   managed_devices.dt_key%TYPE;
      v_dr_key                   managed_devices.dr_key%TYPE;
      v_os_version               managed_devices.OS_VERSION%TYPE;
      v_product_name             managed_devices.BFG_NDP_NAME%TYPE;

      v_create_date              VARCHAR2 (30);
      v_ceased_date              VARCHAR2 (30);

      v_cus_id                   managed_devices.cus_id%TYPE;
      v_device_operation         VARCHAR2 (50) := 'updateInventory';
      v_management_domain        VARCHAR2 (4000);
      v_region_code              VARCHAR2 (4000);
      v_bfg_cus_id               customers.bfg_cus_id%TYPE;
      v_read_cs                  networks.read_cs%TYPE;
      v_write_cs                 networks.write_cs%TYPE;
      v_network_type             network_types.description%TYPE;
      v_dt_descr                 device_types.description%TYPE;
      v_dr_descr                 device_roles.description%TYPE;
      v_cdsv_descr               concord_device_service.description%TYPE;
      v_status_descr             log_classes.description%TYPE;
      v_snmp_flag                VARCHAR2 (30);
      v_model                    managed_devices.bfg_ndp_name%TYPE;
      v_contract_id              bfg_network_nodes.ntn_con_id%TYPE;

      v_vas_product_name         bfg_feature_options.feo_name%TYPE;
      v_vas_cease_date           VARCHAR2 (30);

      v_prob_state               VARCHAR2 (50) := NULL;
      v_prob_test_name           saa_tests.description%TYPE;
      v_prob_test_type           saa_test_types.description%TYPE;
      v_prob_test_protocol       domain_values.meaning%TYPE;
      v_prob_source_port_no      parameter_values.VALUE%TYPE;
      v_prob_source_ip_address   parameter_values.VALUE%TYPE;
      v_prob_target_ip_address   parameter_values.VALUE%TYPE;
      v_prob_target_port_no      parameter_values.VALUE%TYPE;
      v_prob_test_freq           parameter_values.VALUE%TYPE;
      v_prob_packets_count       parameter_values.VALUE%TYPE;
      v_prob_service_class       parameter_values.VALUE%TYPE;
      v_prob_test_start_time     parameter_values.VALUE%TYPE;
      v_prob_test_life           parameter_values.VALUE%TYPE;
      v_prob_packet_size         parameter_values.VALUE%TYPE;
      v_prob_packet_interval     parameter_values.VALUE%TYPE;
      v_header                   xmlDom.domNode;
      v_ptp1                     xmlDom.domNode;
      v_date                     xmlDom.domNode;
      v_tmp1                     xmlDom.domNode;
      v_ptmp                     xmlDom.domNode;
      v_rdn                      xmlDom.domNode;
      v_names                    xmlDom.domNode;
      v_serial_number            chassis_hardware.serial_number%TYPE;
      v_mac_address              Managed_Devices.COLLECTED_MAC_ADDRESS%TYPE;
      v_collect_serial_number    Managed_Devices.COLLECTED_SERIAL_NO%TYPE;

      v_Interface_Desc           VARCHAR2 (4000) := NULL;
      v_bfg_product_type         BFG_NODE_PRODUCT_TYPES.NDT_NAME%TYPE;


      PROCEDURE create_header (p_doc      IN XMLDOM.DOMDOCUMENT,
                               v_header   IN xmlDom.domNode)
      IS
      BEGIN
         v_tmp :=
            dom.create_element_after (v_doc, v_header, 'head:standardHeader');
         v_tmp_1 := dom.create_element_after (v_doc, v_tmp, 'head:e2e');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:E2EDATA',
                                             '');
         v_tmp_1 :=
            dom.create_element_after (v_doc, v_tmp, 'head:serviceState');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:stateCode',
                                             'OK');
         /*dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorCode','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorDesc','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorText','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:errorTrace','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:resendIndicator','true');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:retriesRemaining','0');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:retryInterval','0');*/
         v_tmp_1 :=
            dom.create_element_after (v_doc, v_tmp, 'head:serviceAddressing');
         dom.create_element_with_text_after (
            v_doc,
            v_tmp_1,
            'head:from',
            'http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');
         v_ptp := dom.create_element_after (v_doc, v_tmp_1, 'head:to');
         dom.create_element_with_text_after (
            v_doc,
            v_ptp,
            'head:address',
               'http://capabilities.nat.bt.com/ManageLogicalInventory/'
            || p_Salsa_Id);
         /*v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItemList');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItem');*/
         v_ptp := dom.create_element_after (v_doc, v_tmp_1, 'head:replyTo');
         dom.create_element_with_text_after (
            v_doc,
            v_ptp,
            'head:address',
            'http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');
         /*v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItemList');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItem');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:relatesTo','EDW');/*v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:faultTo');dom.create_element_with_text_after(v_doc,v_ptp,'head:address','http://www.altova.com');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItemList');v_ptp := dom.create_element_after(v_doc, v_ptp, 'head:contextItem');*/
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:messageId',
                                             'MLI/' || p_msg_id);
         dom.create_element_with_text_after (
            v_doc,
            v_tmp_1,
            'head:serviceName',
            'http://capabilities.nat.bt.com/ManageLogicalInventory');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:action',
                                             'inventoryNotification');
         /*v_tmp_1 := dom.create_element_after(v_doc, v_tmp, 'head:serviceProperties');v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:messageExpiry');dom.create_element_with_text_after(v_doc,v_ptp,'head:expiryTime','');dom.create_element_with_text_after(v_doc,v_ptp,'head:expiryAction','');v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:messageDelivery');dom.create_element_with_text_after(v_doc,v_ptp,'head:messagePersistence','');dom.create_element_with_text_after(v_doc,v_ptp,'head:messageRetries','');dom.create_element_with_text_after(v_doc,v_ptp,'head:messageRetryInterval','');dom.create_element_with_text_after(v_doc,v_ptp,'head:messageQoS','');*/
         v_tmp_1 :=
            dom.create_element_after (v_doc,
                                      v_tmp,
                                      'head:serviceSpecification');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:payloadFormat',
                                             'XML');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:version',
                                             '6.0');
         dom.create_element_with_text_after (v_doc,
                                             v_tmp_1,
                                             'head:revision',
                                             '');
      /*v_tmp_1 := dom.create_element_after(p_doc, v_tmp, 'head:serviceSecurity');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:id','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:role','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:type','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:authenticationLevel','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:authenticationToken','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:userEntitlements','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:tokenExpiry','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:callingApplication','');dom.create_element_with_text_after(v_doc,v_tmp_1,'head:callingApplicationCredentials','');*/
      END create_header;

      PROCEDURE create_ptps (p_doc            IN XMLDOM.DOMDOCUMENT,
                             p_node           IN XMLDOM.DOMNODE,
                             p_md_id          IN NUMBER,
                             p_interface_id   IN NUMBER,
                             p_operation      IN VARCHAR)
      IS
         v_ptp               xmlDom.domNode;
         v_tmp               xmlDom.domNode;
         v_management_type   VARCHAR2 (4000);
         v_interface_oper    VARCHAR2 (50) := NULL;
      BEGIN
         /*Added for TNR017 MLI 6.0 Netrep Migration*/
         IF (p_interface_id IS NOT NULL)
         THEN
            FOR rec
               IN (SELECT id,
                          port,
                          name,
                          label,
                          configured_bandwidth,
                          actual_bandwidth,
                          duplex,
                          TO_CHAR (cease_date,
                                   'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                             cease_date,
                          TO_CHAR (modified_date,
                                   'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                             modified_date,
                          management_type,
                          domain
                     FROM interfaces
                    WHERE md_id = p_md_id AND id = NVL (p_interface_id, 0))
            LOOP
               BEGIN
                  SELECT NVL (
                            domain.get_meaning ('INM', rec.management_type),
                            '')
                    INTO v_management_type
                    FROM DUAL;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
               END;

               v_interface_oper := NULL;

               IF NVL (p_interface_id, 0) = rec.id
               /* The current interface is added , updated or ceased */
               THEN
                  /* Decode the operation */
                  IF p_operation = 'I'
                  THEN
                     v_interface_oper := 'interfaceAdded';
                  ELSIF p_operation = 'U'
                  THEN
                     v_interface_oper := 'interfaceUpdated';
                  ELSE
                     v_interface_oper := 'interfaceCeased';
                  END IF;
               END IF;

               BEGIN
                  SELECT mib.get_interface_mib_entry (rec.id,
                                                      '1.3.6.1.2.1.2.2.1.2')
                    INTO v_Interface_Desc
                    FROM DUAL;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
               END;


               v_tmp1 :=
                  dom.create_element_after (v_doc, v_ptmp, 'mlidata:ptp');
               v_rdn :=
                  dom.create_element_after (v_doc, v_tmp1, 'mlidata:name');
               v_name :=
                  dom.create_element_after (v_doc, v_rdn, 'mlidata:rdn');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:type',
                                                   'PTP');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.port);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:id',
                                                   rec.id);  /*Interface Id */

               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:aliasNames');
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:aliasName');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'interfacename');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.name);

               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:userLabel',
                                                   rec.label);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:source',
                                                   'NETWORK_EMS');
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:resourceState',
                                                   'INSTALLED');
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:serviceState',
                                                   'IN_SERVICE');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:resourceDates');

               IF (rec.cease_date IS NOT NULL)
               THEN
                  v_date :=
                     dom.create_element_after (v_doc,
                                               v_tmp,
                                               'mlidata:resourceDate');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateType',
                                                      'ACTUAL_DATE');
                  dom.create_element_with_text_after (
                     v_doc,
                     v_date,
                     'mlidata:resourceState',
                     'RETIRED');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateTime',
                                                      rec.cease_date);
               END IF;

               IF (rec.modified_date IS NOT NULL)
               THEN
                  v_date :=
                     dom.create_element_after (v_doc,
                                               v_tmp,
                                               'mlidata:resourceDate');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateType',
                                                      'LAST_MODIFIED_DATE');
                  dom.create_element_with_text_after (
                     v_doc,
                     v_date,
                     'mlidata:resourceState',
                     'INSTALLED');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateTime',
                                                      rec.modified_date);
               END IF;

               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:usage',
                                                   v_management_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:directionality',
                                                   'BIDIRECTIONAL');
               v_ptp :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:transmissionParameters');

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_ptp,
                                            'mlidata:transmissionParameters');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:layerRate',
                                                   'LR_DSL');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:bandwidth',
                                                   '');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_name,
                                            'mlidata:parameters');
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'DataRate');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   '');

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_ptp,
                                            'mlidata:transmissionParameters');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:layerRate',
                                                   'LR_Not_Applicable');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:bandwidth',
                                                   '');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_name,
                                            'mlidata:parameters');
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'AdministrativeSpeedRate');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.configured_bandwidth);
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'ActualSpeedRate');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.actual_bandwidth);
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'DuplexMode');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.duplex);

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:ptpVendorExtensions');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:mtosiVersion',
                                                   'MTOSI 2.0');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:extVersion',
                                                   '');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:extAuthor',
                                                   '');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_name,
                                            'mlidata:additionalInfo');

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:additionalInfo');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'InterfaceDescription');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   v_Interface_Desc);

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:additionalInfo');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'PTPOperation');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   v_interface_oper);

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:additionalInfo');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'IFDomain');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.domain);
            END LOOP;
         END IF;

         /*Added for TNR017 MLI 6.0 Netrep Migration*/
         IF (p_interface_id IS NULL AND p_operation = 'D')
         THEN
            FOR rec
               IN (SELECT id,
                          port,
                          name,
                          label,
                          configured_bandwidth,
                          actual_bandwidth,
                          duplex,
                          TO_CHAR (cease_date,
                                   'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                             cease_date,
                          TO_CHAR (modified_date,
                                   'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                             modified_date,
                          management_type,
                          domain
                     FROM interfaces
                    WHERE md_id = p_md_id AND management_type = 2)
            LOOP
               BEGIN
                  SELECT NVL (
                            domain.get_meaning ('INM', rec.management_type),
                            '')
                    INTO v_management_type
                    FROM DUAL;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
               END;

               v_interface_oper := NULL;


               BEGIN
                  SELECT mib.get_interface_mib_entry (rec.id,
                                                      '1.3.6.1.2.1.2.2.1.2')
                    INTO v_Interface_Desc
                    FROM DUAL;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
               END;


               v_tmp1 :=
                  dom.create_element_after (v_doc, v_ptmp, 'mlidata:ptp');
               v_rdn :=
                  dom.create_element_after (v_doc, v_tmp1, 'mlidata:name');
               v_name :=
                  dom.create_element_after (v_doc, v_rdn, 'mlidata:rdn');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:type',
                                                   'PTP');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.port);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:id',
                                                   rec.id);  /*Interface Id */

               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:aliasNames');
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:aliasName');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'interfacename');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.name);

               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:userLabel',
                                                   rec.label);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:source',
                                                   'NETWORK_EMS');
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:resourceState',
                                                   'INSTALLED');
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:serviceState',
                                                   'IN_SERVICE');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:resourceDates');

               IF (rec.cease_date IS NOT NULL)
               THEN
                  v_date :=
                     dom.create_element_after (v_doc,
                                               v_tmp,
                                               'mlidata:resourceDate');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateType',
                                                      'ACTUAL_DATE');
                  dom.create_element_with_text_after (
                     v_doc,
                     v_date,
                     'mlidata:resourceState',
                     'RETIRED');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateTime',
                                                      rec.cease_date);
               END IF;

               IF (rec.modified_date IS NOT NULL)
               THEN
                  v_date :=
                     dom.create_element_after (v_doc,
                                               v_tmp,
                                               'mlidata:resourceDate');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateType',
                                                      'LAST_MODIFIED_DATE');
                  dom.create_element_with_text_after (
                     v_doc,
                     v_date,
                     'mlidata:resourceState',
                     'INSTALLED');
                  dom.create_element_with_text_after (v_doc,
                                                      v_date,
                                                      'mlidata:dateTime',
                                                      rec.modified_date);
               END IF;

               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:usage',
                                                   v_management_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:directionality',
                                                   'BIDIRECTIONAL');
               v_ptp :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:transmissionParameters');

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_ptp,
                                            'mlidata:transmissionParameters');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:layerRate',
                                                   'LR_DSL');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:bandwidth',
                                                   '');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_name,
                                            'mlidata:parameters');
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'DataRate');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   '');

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_ptp,
                                            'mlidata:transmissionParameters');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:layerRate',
                                                   'LR_Not_Applicable');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:bandwidth',
                                                   '');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_name,
                                            'mlidata:parameters');
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'AdministrativeSpeedRate');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.configured_bandwidth);
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'ActualSpeedRate');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.actual_bandwidth);
               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:parameter');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'DuplexMode');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.duplex);

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp1,
                                            'mlidata:ptpVendorExtensions');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:mtosiVersion',
                                                   'MTOSI 2.0');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:extVersion',
                                                   '');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:extAuthor',
                                                   '');
               v_tmp :=
                  dom.create_element_after (v_doc,
                                            v_name,
                                            'mlidata:additionalInfo');

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:additionalInfo');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'InterfaceDescription');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   v_Interface_Desc);

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:additionalInfo');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'PTPOperation');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   v_interface_oper);

               v_name :=
                  dom.create_element_after (v_doc,
                                            v_tmp,
                                            'mlidata:additionalInfo');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:key',
                                                   'IFDomain');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:value',
                                                   rec.domain);
            END LOOP;
         END IF;
      END create_ptps;

      PROCEDURE create_probes (p_doc               IN XMLDOM.DOMDOCUMENT,
                               p_md_id             IN NUMBER,
                               p_test_id           IN NUMBER,
                               p_operation         IN VARCHAR,
                               p_managed_devices   IN XMLDOM.DOMNODE)
      IS
         p_name    xmlDom.domNode;
         p_name1   xmlDom.domNode;
      BEGIN
         IF (p_test_id IS NOT NULL)
         THEN
            /*Modified ended for TNR013 MLI 5.0 Netrep by Ramyajit*/
            /*Added as part of IPSLA Changes*/
            FOR crec IN (SELECT ID,
                                TEST_NAME,
                                TEST_TYPE,
                                TEST_PROTOCOL,
                                SOURCE_PORT,
                                SOURCE_IP_ADDRESS,
                                TARGET_IP_ADDRESS,
                                TARGET_PORT,
                                TEST_FREQUENCY,
                                NO_OF_PACKETS,
                                SERVICE_CLASS,
                                TEST_START_TIME,
                                TEST_LIFE,
                                PACKETS_SIZE,
                                PACKETS_INTERVAL,
                                TARGET_URL,
                                DNS_NAME_SERVER
                           FROM mli_probes
                          WHERE md_id_source = p_md_id AND id = p_test_id)
            LOOP
               /*Add Ended as part of IPSLA Changes*/
               -- v_name := dom.create_element_after(v_doc,v_managed_devices,'mtos:additionalInfo');
               /*Added as part of IPSLA changes*/
               IF NVL (p_test_id, 0) = crec.id
               THEN
                  /* The current probe is added , updated or ceased */
                  IF p_operation = 'I'
                  THEN
                     v_prob_state := 'ProbeCreated';
                  ELSIF p_operation = 'U'
                  THEN
                     v_prob_state := 'ProbeUpdated';
                  ELSE
                     v_prob_state := 'ProbeCeased';
                  END IF;
               END IF;

               v_name :=
                  dom.create_element_after (v_doc, v_ptp, 'mlidata:probes');
               v_name :=
                  dom.create_element_after (v_doc, v_name, 'mlidata:probe');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testID',
                                                   crec.id);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testName',
                                                   crec.test_name);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testType',
                                                   crec.test_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testProtocol',
                                                   crec.test_protocol);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:sourceIPAddress',
                                                   crec.source_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:sourcePortNumber',
                  crec.source_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:targetIPAddress',
                                                   crec.target_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:targetPortNumber',
                  crec.target_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:frequency',
                                                   crec.test_frequency);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:serviceClass',
                                                   crec.service_class);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:startTime',
                                                   crec.test_start_time);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testLife',
                                                   crec.test_life);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetCount',
                                                   crec.NO_OF_PACKETS);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetSize',
                                                   crec.packets_size);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetInterval',
                                                   crec.packets_interval);

               IF (crec.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (v_doc,
                                                      v_name,
                                                      'mlidata:targetURL',
                                                      crec.TARGET_URL);
               END IF;

               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:dnsNameServer',
                                                   crec.dns_name_server);
            END LOOP;

            FOR crec1 IN (SELECT ID,
                                 TEST_NAME,
                                 TEST_TYPE,
                                 TEST_PROTOCOL,
                                 SOURCE_PORT,
                                 SOURCE_IP_ADDRESS,
                                 TARGET_IP_ADDRESS,
                                 TARGET_PORT,
                                 TEST_FREQUENCY,
                                 NO_OF_PACKETS,
                                 SERVICE_CLASS,
                                 TEST_START_TIME,
                                 TEST_LIFE,
                                 PACKETS_SIZE,
                                 PACKETS_INTERVAL,
                                 TARGET_URL,
                                 DNS_NAME_SERVER
                            FROM mli_probes_deleted
                           WHERE id = p_test_id)
            LOOP
               v_prob_state := 'ProbeCeased';
               v_name :=
                  dom.create_element_after (v_doc, v_ptp, 'mlidata:probes');
               v_name :=
                  dom.create_element_after (v_doc, v_name, 'mlidata:probe');
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testID',
                                                   crec1.id);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testName',
                                                   crec1.test_name);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testType',
                                                   crec1.test_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testProtocol',
                                                   crec1.test_protocol);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:sourceIPAddress',
                                                   crec1.source_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:sourcePortNumber',
                  crec1.source_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:targetIPAddress',
                                                   crec1.target_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_name,
                  'mlidata:targetPortNumber',
                  crec1.target_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:frequency',
                                                   crec1.test_frequency);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:serviceClass',
                                                   crec1.service_class);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:startTime',
                                                   crec1.test_start_time);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:testLife',
                                                   crec1.test_life);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetCount',
                                                   crec1.NO_OF_PACKETS);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetSize',
                                                   crec1.packets_size);
               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:packetInterval',
                                                   crec1.packets_interval);

               IF (crec1.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (v_doc,
                                                      v_name,
                                                      'mlidata:targetURL',
                                                      crec1.target_URL);
               END IF;

               dom.create_element_with_text_after (v_doc,
                                                   v_name,
                                                   'mlidata:dnsNameServer',
                                                   crec1.dns_name_server);
            END LOOP;
         END IF;

         /*Added for TNR013 MLI 5.0 Netrep by Ramyajit*/
         IF (p_test_id IS NULL AND p_operation IN ('D'))
         THEN
            v_prob_state := 'ProbeCeased';


            v_name :=
               dom.create_element_after (v_doc, v_ptp, 'mlidata:probes');

            FOR crec2 IN (SELECT ID,
                                 TEST_NAME,
                                 TEST_TYPE,
                                 TEST_PROTOCOL,
                                 SOURCE_PORT,
                                 SOURCE_IP_ADDRESS,
                                 TARGET_IP_ADDRESS,
                                 TARGET_PORT,
                                 TEST_FREQUENCY,
                                 NO_OF_PACKETS,
                                 SERVICE_CLASS,
                                 TEST_START_TIME,
                                 TEST_LIFE,
                                 PACKETS_SIZE,
                                 PACKETS_INTERVAL,
                                 TARGET_URL,
                                 DNS_NAME_SERVER
                            FROM mli_probes
                           WHERE md_id_source = p_md_id)
            LOOP
               --v_name := dom.create_element_after(v_doc, v_name,'mlidata:probes');
               v_tmp1 :=
                  dom.create_element_after (v_doc, v_name, 'mlidata:probe');
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testID',
                                                   crec2.id);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testName',
                                                   crec2.test_name);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testType',
                                                   crec2.test_type);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testProtocol',
                                                   crec2.test_protocol);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:sourceIPAddress',
                                                   crec2.source_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_tmp1,
                  'mlidata:sourcePortNumber',
                  crec2.source_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:targetIPAddress',
                                                   crec2.target_ip_address);
               dom.create_element_with_text_after (
                  v_doc,
                  v_tmp1,
                  'mlidata:targetPortNumber',
                  crec2.target_port);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:frequency',
                                                   crec2.test_frequency);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:serviceClass',
                                                   crec2.service_class);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:startTime',
                                                   crec2.test_start_time);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:testLife',
                                                   crec2.test_life);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:packetCount',
                                                   crec2.NO_OF_PACKETS);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:packetSize',
                                                   crec2.packets_size);
               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:packetInterval',
                                                   crec2.packets_interval);

               IF (crec2.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (v_doc,
                                                      v_tmp1,
                                                      'mlidata:targetURL',
                                                      crec2.TARGET_URL);
               END IF;

               dom.create_element_with_text_after (v_doc,
                                                   v_tmp1,
                                                   'mlidata:dnsNameServer',
                                                   crec2.dns_name_server);
            END LOOP;
         END IF;
      /*Added Ended for TNR013 MLI 5.0 Netrep by Ramyajit*/
      END create_probes;

   BEGIN
      SELECT id,
             host_name,
             net_cg_id,
             ip_address,
             customer_ip_address,
             cus_name,
             net_name,
             bfg_ntn_id,
             lc_key,
             TO_CHAR (modified_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                modified_date,
             sysobjectid,
             cdsv_key,
             net_id,
             customer_host_name,
             OS_VERSION,
             BFG_NDP_NAME,
             dt_key,
             dr_key,
             TO_CHAR (create_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                create_date,
             TO_CHAR (ceased_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
                ceased_date,
             cus_id,
             DECODE (activated, 'Y', 'Y', 'N'),
             bfg_ndp_name,
             COLLECTED_MAC_ADDRESS,
             COLLECTED_SERIAL_NO
        INTO v_md_id,
             v_host_name,
             v_cg_id,
             v_ip_address,
             v_customer_ip_address,
             v_cus_name,
             v_net_name,
             v_bfg_ntn_id,
             v_lc_key,
             v_modified_date,
             v_sysobjectid,
             v_cdsv_key,
             v_net_id,
             v_cust_host_name,
             v_os_version,
             v_product_name,
             v_dt_key,
             v_dr_key,
             v_create_date,
             v_ceased_date,
             v_cus_id,
             v_snmp_flag,
             v_model,
             v_mac_address,
             v_collect_serial_number
        FROM managed_Devices md
       WHERE id = p_md_id;

      BEGIN
          SELECT SIT_ID, SIT_NAME into v_bfg_site_id, v_bfg_site_name
          FROM bfg_network_nodes ntn, bfg_sites sit WHERE ntn.ntn_sit_id=sit.sit_id and ntn.ntn_id = v_bfg_ntn_id;
       EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            SELECT cs_id, bfg_site_name into v_bfg_site_id, v_bfg_site_name
            FROM managed_Devices md
            WHERE id = p_md_id;
       END;

      IF    (p_interface_id IS NOT NULL AND v_lc_key = 'CSD')
         OR (p_test_id IS NOT NULL AND v_lc_key = 'CSD')
      THEN
         v_output_xml := NULL;
         RETURN v_output_xml;
      END IF;

      BEGIN
         SELECT net.read_cs, net.write_cs, nt.description
           INTO v_read_cs, v_write_cs, v_network_type
           FROM networks net, network_types nt
          WHERE id = v_net_id AND nt.key = net.nt_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT bfg_cus_id
           INTO v_bfg_cus_id
           FROM customers
          WHERE id = v_cus_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_dt_descr
           FROM device_types
          WHERE KEY = v_dt_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_dr_descr
           FROM device_roles
          WHERE KEY = v_dr_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_cdsv_descr
           FROM concord_device_service
          WHERE KEY = v_cdsv_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT description
           INTO v_status_descr
           FROM log_classes
          WHERE KEY = v_lc_key;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT NVL (management_domain.GET_MD_MGMT_DOMAIN (p_md_id, 1), '')
           INTO v_management_domain
           FROM DUAL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT ntn_con_id
            INTO v_contract_id
           FROM bfg_network_nodes
          WHERE ntn_id = v_bfg_ntn_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT NVL (region.get_region_code (v_bfg_ntn_id), '')
           INTO v_region_code
           FROM DUAL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      BEGIN
         SELECT serial_number
           INTO v_serial_number
           FROM chassis_hardware
          WHERE id = p_hc_id AND md_id = p_md_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      --Added as part of Ontario server Reporting TNR011
      BEGIN
         SELECT BNPT.NDT_NAME BFG_PRODUCT_TYPE
           INTO v_bfg_product_type
           FROM BFG_NETWORK_NODES BFG_NET,
                BFG_NODE_PRODUCTS BNP,
                BFG_NODE_PRODUCT_TYPES BNPT
          WHERE     BFG_NET.NTN_NDP_ID = BNP.NDP_ID
                AND BNP.NDP_NDT_ID = BNPT.NDT_ID
                AND BFG_NET.NTN_ID = v_bfg_ntn_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      --Add Ended

      /********************For EDW start Added by Ramyajit on 06/102010******/
      /* If the feature option instances is modified, then it could be for a subscribed VAS product .
      Here the details of the vas product for the modified feo id need to be provided*/
      IF (NVL (p_foi_id, 0) <> 0)
      THEN
         BEGIN
            SELECT FEO_NAME,
                   TO_CHAR (FOI_CEASE_DATE, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')
              INTO v_vas_product_name, v_vas_cease_date
              FROM BFG_FEATURE_OPTIONS, S_BFG_FEATURE_OPTION_INSTANCES
             WHERE FOI_ID = p_foi_id AND FOI_FEO_ID = FEO_ID;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
            WHEN TOO_MANY_ROWS
            THEN
               NULL;
         END;
      END IF;

      /********************For EDW END********/



      /**************added the device opreation on 03/05/2011***/
      IF (p_type = 'S')
      THEN
         /* Decode the operation */
         CASE p_operation
            WHEN 'I'
            THEN
               v_device_operation := 'addInventory';
            WHEN 'U'
            THEN
               v_device_operation := 'updateInventory';
            ELSE
               v_device_operation := 'ceaseInventory';
         END CASE;

         /*Modified by Ramyajit for TNR015 Warranty Drop Ontario Changes*/
         IF (   ( (NVL (p_interface_id, 0) > 0) AND v_lc_key = 'IS')
             OR ( (NVL (p_test_id, 0) > 0) AND v_lc_key = 'IS'))
         THEN
            v_device_operation := 'updateInventory';
         ELSIF (   ( (NVL (p_interface_id, 0) > 0) AND v_lc_key = 'CSD')
                OR ( (NVL (p_test_id, 0) > 0) AND v_lc_key = 'CSD'))
         THEN
            v_device_operation := 'ceaseInventory';
         END IF;
      END IF;

      /**************add ended on 03/05/2011***************/
      v_header :=
         dom.create_element_after (v_doc,
                                   xmlDom.makeNode (v_doc),
                                   'mlidata:inventory');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xsi:schemaLocation',
         'http://collaborate.bt.com/svn/sdkrepo/pbp/1238/tags/6_0/ManageLogicalInventoryData/ ManageLogicalInventoryData.xsd');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:mlidata',
         'http://collaborate.bt.com/svn/sdkrepo/pbp/1238/tags/6_0/ManageLogicalInventoryData/');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:head',
         'http://wsi.nat.bt.com/2005/06/StandardHeader/');
      dom.create_attribute_for (v_doc,
                                v_header,
                                'xmlns:xsi',
                                'http://www.w3.org/2001/XMLSchema-instance');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:adli',
         'https://collaborate.bt.com/svn/edm/adli/IPAddress');
      dom.create_attribute_for (
         v_doc,
         v_header,
         'xmlns:ssp',
         'https://collaborate.bt.com/svn/edm/ssp/trunk/Address.xsd');


      create_header (v_doc, v_header);
      v_managed_devices :=
         dom.create_element_after (v_doc, v_header, 'logicalInventory');
      dom.create_attribute_for (v_doc,
                                v_managed_devices,
                                'messageType',
                                'Notification');
      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'numberOfRecords',
                                          '1');
      dom.create_element_with_text_after (v_doc,
                                          v_managed_devices,
                                          'startIndex',
                                          '1');
      v_managed_devices :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'managementDomains');
      v_name :=
         dom.create_element_after (v_doc,
                                   v_managed_devices,
                                   'mlidata:managementDomain');


      v_tmp :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:id',
                                             '');
      v_tmp :=
         dom.create_element_after (v_doc, v_name, 'mlidata:managedElements');
      v_ptp :=
         dom.create_element_after (v_doc, v_tmp, 'mlidata:managedElement');
      v_ptp1 := dom.create_element_after (v_doc, v_ptp, 'mlidata:name');
      v_name := dom.create_element_after (v_doc, v_ptp1, 'mlidata:rdn');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:type',
                                          'ME');
      v_name :=
         dom.create_element_with_text_after (v_doc,
                                             v_name,
                                             'mlidata:value',
                                             p_md_id);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:id',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:parentId',
                                          v_bfg_ntn_id);
      v_tmp := dom.create_element_after (v_doc, v_ptp, 'mlidata:aliasNames');
      v_ptp1 := dom.create_element_after (v_doc, v_tmp, 'mlidata:aliasName');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp1,
                                          'mlidata:key',
                                          'SysObjectId');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp1,
                                          'mlidata:value',
                                          v_sysobjectid);

      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:userLabel',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:version',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:owner',
                                          'NMDB');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:nativeEMSName',
                                          'NETWORK_EMS');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:networkAccessDomain',
                                          v_management_domain);
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:resourceState',
                                          'INSTALLED');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:serviceState',
                                          'IN_SERVICE');
      v_ptp1 :=
         dom.create_element_after (v_doc, v_ptp, 'mlidata:resourceDates');

      IF (v_create_date IS NOT NULL)
      THEN
         v_date :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:resourceDate');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateType',
                                             'ACTUAL_DATE');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:resourceState',
                                             'INSTALLED');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateTime',
                                             v_create_date);
      END IF;

      IF (v_ceased_date IS NOT NULL)
      THEN
         v_date :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:resourceDate');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateType',
                                             'ACTUAL_DATE');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:resourceState',
                                             'RETIRED');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateTime',
                                             v_ceased_date);
      END IF;

      IF (v_modified_date IS NOT NULL)
      THEN
         v_date :=
            dom.create_element_after (v_doc, v_ptp1, 'mlidata:resourceDate');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateType',
                                             'LAST_MODIFIED_DATE');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:resourceState',
                                             'INSTALLED');
         dom.create_element_with_text_after (v_doc,
                                             v_date,
                                             'mlidata:dateTime',
                                             v_modified_date);
      END IF;

      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:capacity',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:usage',
                                          '');

      /*Added by Ramyajit for TNR017 Netrep MLI 6.0*/

      IF (    LOWER (p_Destination_Id) = ('netrepsolstice')
          AND p_entity IN ('D', 'P'))
      THEN
         create_probes (v_doc,
                        p_md_id,
                        p_test_id,
                        p_operation,
                        v_managed_devices);
      END IF;

      /*Add Ended by Ramyajit as part of TNR017 MLI 6.0*/
      v_name :=
         dom.create_element_after (v_doc, v_ptp, 'mlidata:logicalLocation');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:siteId',
                                          v_bfg_site_id);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:name',
                                          v_bfg_site_name);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:region',
                                          v_region_code);

      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:mdfId',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:meType',
                                          v_dt_descr);          ---Device Type
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:meModel',
                                          v_model);          ---BFG MOdel Name
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:meUsage',
                                          v_dr_descr);         ----Device Role
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:osVersion',
                                          v_os_version);        -----OS version
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:productName',
                                          v_product_name);        -----Product name
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:network',
                                          v_network_type);      --Network Type
      dom.create_element_with_text_after (v_doc,
                                          v_ptp,
                                          'mlidata:QOS',
                                          'QOS');

      v_name :=
         dom.create_element_after (v_doc,
                                   v_ptp,
                                   'mlidata:meVendorExtensions');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:mtosiVersion',
                                          'MTOSI 2.0');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:extVersion',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:extAuthor',
                                          '');

      v_tmp1 :=
         dom.create_element_after (v_doc, v_name, 'mlidata:additionalInfo');

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'ClientGroupID');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_cg_id);         ---Client Group Id

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'DeviceOperation');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_device_operation); --Device Operation

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'CustomerName');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_cus_name);         --Customer_Name

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'BFG PRODUCT TYPE');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_bfg_product_type); --BFG Product Type of The Device

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'CustomerNetworkCircleName');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_net_name); --Customer Network Circle Name

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'Prop_Status');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_status_descr);     --Device Status

      v_tmp :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:key',
                                          'SNMP_Flag');
      dom.create_element_with_text_after (v_doc,
                                          v_tmp,
                                          'mlidata:value',
                                          v_snmp_flag);            --SNMP Flag

      v_name :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'ContractID');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_contract_id);    --BFG Contract Id

      v_name :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'CustomerId');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_bfg_cus_id);     --BFG Customer Id

      v_name :=
         dom.create_element_after (v_doc, v_tmp1, 'mlidata:additionalInfo');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:key',
                                          'DeviceService');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'mlidata:value',
                                          v_cdsv_descr);      --Device Service

      IF (    LOWER (p_Destination_Id) = ('netrepsolstice')
          AND p_entity IN ('D', 'I'))
      THEN
         v_ptmp :=
            dom.create_element_after (v_doc,
                                      v_ptp,
                                      'mlidata:physicalTerminationPoints');
         create_ptps (v_doc,
                      v_ptmp,
                      p_md_id,
                      p_interface_id,
                      p_operation);
      END IF;

      v_names :=
         dom.create_element_after (v_doc,
                                   v_ptp,
                                   'mlidata:managementIPAddresses');

      v_name := dom.create_element_after (v_doc, v_names, 'mlidata:ipAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipValue',
                                          v_ip_address);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:dnsName',
                                          v_host_name);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:subnetworkMask',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ippool',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipType',
                                          '');

      v_name := dom.create_element_after (v_doc, v_names, 'mlidata:ipAddress');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipValue',
                                          v_customer_ip_address);
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:dnsName',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:subnetworkMask',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ippool',
                                          '');
      dom.create_element_with_text_after (v_doc,
                                          v_name,
                                          'adli:ipType',
                                          'CustomerIP');


      DBMS_LOB.createtemporary (v_output_xml, TRUE);
      dom.get_xml (v_doc, v_output_xml);
      dom.free_document (v_doc);
      RETURN v_output_xml;
   END CREATE_MLI_6_0_RESPONSE;

   /*****************END   Function CREATE_MLI_6_0_RESPONSE*****************/

PROCEDURE GET_MLI_8_0_DEVICE(
    p_doc IN XMLDOM.DOMDOCUMENT,
    p_managed_elements IN XMLDOM.DOMNODE, 
    p_md_id IN MANAGED_DEVICES.ID%TYPE,
    p_type IN VARCHAR2 DEFAULT NULL, 
    p_operation IN VARCHAR2 DEFAULT NULL,
    p_test_id IN NUMBER,
    p_interface_id IN VARCHAR2 DEFAULT NULL,
    p_destination_id IN VARCHAR2 DEFAULT NULL,
    p_entity IN VARCHAR2 DEFAULT NULL,
	p_bfg_ntn_id IN MANAGED_DEVICES.BFG_NTN_ID%TYPE DEFAULT NULL
    )
IS
    v_managedElement XMLDOM.DOMNODE;
    v_aliasNames XMLDOM.DOMNODE;
    v_aliasName1 XMLDOM.DOMNODE;
    v_aliasName2 XMLDOM.DOMNODE;
    v_resourceDates XMLDOM.DOMNODE;
    v_resourceDate_actDate XMLDOM.DOMNODE;
    v_resourceDate_modDate XMLDOM.DOMNODE;
    v_protocols XMLDOM.DOMNODE;
    v_logicalLocation XMLDOM.DOMNODE;
	
	-- Added by Prajesh: New XML node - logicalLocation/addressRef for GSCE-175763 story
    v_addressRef XMLDOM.DOMNODE;
    v_addressRef_street XMLDOM.DOMNODE;
    v_addressRef_city XMLDOM.DOMNODE;
    v_addressRef_countryStateProv XMLDOM.DOMNODE;
    v_addressRef_country XMLDOM.DOMNODE;
    v_addressRef_postCode XMLDOM.DOMNODE;

    v_resLocs XMLDOM.DOMNODE;
    v_resLoc XMLDOM.DOMNODE;
    v_resLoc_alternateId XMLDOM.DOMNODE;
    v_resLoc_alternateId_id XMLDOM.DOMNODE;
    v_resLoc_alternateId_id_id XMLDOM.DOMNODE;
    v_resLoc_floor XMLDOM.DOMNODE;
    v_resLoc_room XMLDOM.DOMNODE;
    v_resLoc_section XMLDOM.DOMNODE;
    --------------------------------------------------------------------------------	
	
    v_meVendorExtensions XMLDOM.DOMNODE;
    v_additionalInfo XMLDOM.DOMNODE;
    v_additionalInfo_DeviceOp XMLDOM.DOMNODE;
    v_additionalInfo_BFGProdID XMLDOM.DOMNODE;
    v_additionalInfo_BFGProd XMLDOM.DOMNODE;
    v_additionalInfo_BFGProdTyID XMLDOM.DOMNODE;
    v_additionalInfo_BFGProdTy XMLDOM.DOMNODE;
    v_additionalInfo_NTNSrcSys XMLDOM.DOMNODE;
    v_additionalInfo_Prefix XMLDOM.DOMNODE;
    v_additionalInfo_Prop_Status XMLDOM.DOMNODE;
    v_additionalInfo_ContractID XMLDOM.DOMNODE;
    v_additionalInfo_CustomerId XMLDOM.DOMNODE;
    v_additionalInfo_CustomerName XMLDOM.DOMNODE;
    v_additionalInfo_MD_Comment XMLDOM.DOMNODE;
    v_additionalInfo_PC_ID XMLDOM.DOMNODE;
    v_additionalInfo_PC_NAME XMLDOM.DOMNODE;
    v_IPAddresses XMLDOM.DOMNODE;
    v_ipAddress_mgmtIP XMLDOM.DOMNODE;
    v_ipAddress_custIP XMLDOM.DOMNODE;
    v_ipAddress_custIPv6 XMLDOM.DOMNODE;
    v_additionalInfo_Dev_Cat XMLDOM.DOMNODE;
    v_additionalInfo_Dev_Stat XMLDOM.DOMNODE;
    v_additionalInfo_NTNRole XMLDOM.DOMNODE;
    v_additionalInfo_SNE_ID  XMLDOM.DOMNODE;
    
    v_bfg_cus_id                customers.bfg_cus_id%TYPE;
    v_bfg_product_id            BFG_NODE_PRODUCTS.NDP_ID%TYPE;
    v_bfg_product_name          BFG_NODE_PRODUCTS.NDP_NAME%TYPE;
    v_bfg_product_type_id       BFG_NODE_PRODUCT_TYPES.NDT_ID%TYPE;
    v_bfg_product_type          BFG_NODE_PRODUCT_TYPES.NDT_NAME%TYPE;
    v_bfg_source_system         BFG_NETWORK_NODES.NTN_SOURCE_SYSTEM%TYPE;
    v_bfg_ntn_type              BFG_NETWORK_NODES.NTN_TYPE%TYPE;
    v_bfg_ntn_server_os         BFG_NETWORK_NODES.NTN_SERVER_OPERATING_SYSTEM%TYPE;    
    v_bfg_ntn_os_version_num    BFG_NETWORK_NODES.NTN_OS_VERSION_NUMBER%TYPE;
    v_bfg_ntn_role              BFG_NETWORK_NODES.NTN_ROLE%TYPE;
    v_bfg_site_id               BFG_SITES.sit_id%TYPE;
    v_bfg_site_name             BFG_SITES.sit_name%TYPE;
    v_Interface_id              Interfaces.Id%TYPE;
    v_count                     NUMBER;
        
        
    TYPE T_MLI_8_DEVICE IS RECORD
    (
        md_id managed_Devices.id%TYPE,--<mlidata:id>
        host_name managed_Devices.host_name%TYPE,--BFGDeviceId
        cg_id managed_Devices.net_cg_id%TYPE,
        ip_address managed_Devices.ip_address%TYPE,
        customer_ip_address managed_Devices.customer_ip_address%TYPE,
        cus_name managed_Devices.cus_name%TYPE,
        net_name managed_Devices.net_name%TYPE,--<mlidata:networkAccessDomain>
        bfg_ntn_id managed_Devices.bfg_ntn_id%TYPE,
        lc_key managed_Devices.lc_key%TYPE,
        modified_date VARCHAR2(100),
        sysobjectid managed_Devices.sysobjectid%TYPE,
        cdsv_key managed_Devices.cdsv_key%TYPE,
        net_id managed_Devices.net_id%TYPE,
        cust_host_name managed_Devices.customer_host_name%TYPE,
        dt_key managed_Devices.dt_key%TYPE,
        dr_key managed_Devices.dr_key%TYPE,
        create_date VARCHAR2(100),
        ceased_date VARCHAR2(100),
        cus_id managed_Devices.cus_id%TYPE,
        snmp_flag VARCHAR2(1),
        mac_address managed_Devices.COLLECTED_MAC_ADDRESS%TYPE,
        collect_serial_number managed_Devices.COLLECTED_SERIAL_NO%TYPE,
        md_comment managed_Devices.md_comment%TYPE,
        pc_id managed_Devices.pc_id%TYPE,
        cus_ip_address_ipv6 managed_Devices.cus_ip_address_ipv6%TYPE,
        device_category_flag managed_Devices.device_category_flag%TYPE
        );
        
     v_device T_MLI_8_DEVICE;

    CURSOR C_DEVICE IS
       SELECT
            id,
            host_name,
            net_cg_id,
            ip_address,
            customer_ip_address,   
            cus_name,
            net_name,
            bfg_ntn_id,
            lc_key,
            TO_CHAR(modified_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"') modified_date,
            sysobjectid,
            cdsv_key,
            net_id,
            customer_host_name,
            dt_key,
            dr_key,
            TO_CHAR(create_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"') create_date,
            TO_CHAR(ceased_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"') ceased_date,cus_id,
            DECODE(activated,'Y','Y','N'),
            COLLECTED_MAC_ADDRESS,
            COLLECTED_SERIAL_NO,
            md_comment,
            pc_id,
            cus_ip_address_ipv6,--CustomerIPv6
            device_category_flag
         FROM managed_Devices md
        WHERE id          = p_md_id;
		
		
				
  -- Added by Prajesh: T_MLI_8_ADDRESS and C_ADDRESS for GSCE-175763 Story
  TYPE T_MLI_8_ADDRESS IS RECORD
  (   
      adr_street_name bfg_addresses.adr_street_name%TYPE,
      adr_town bfg_addresses.adr_town%TYPE,
      adr_county bfg_addresses.adr_county%TYPE,
      adr_country bfg_addresses.adr_country%TYPE,
      adr_post_zip_code bfg_addresses.adr_post_zip_code%TYPE       
  );

  v_address T_MLI_8_ADDRESS;

  CURSOR C_ADDRESS IS
    SELECT 
      bfg_addresses.adr_street_name,
      bfg_addresses.adr_town,
      bfg_addresses.adr_county,
      bfg_addresses.adr_country,
      bfg_addresses.adr_post_zip_code
    FROM managed_devices
    join bfg_network_nodes
    ON bfg_network_nodes.ntn_id = managed_devices.bfg_ntn_id
    join bfg_locations
    ON bfg_locations.loc_id = bfg_network_nodes.ntn_loc_id
    join bfg_sites
    ON bfg_sites.sit_id = bfg_network_nodes.ntn_sit_id
    join bfg_addresses
    ON bfg_addresses.adr_id = bfg_sites.sit_adr_id
    WHERE managed_devices.bfg_ntn_id = p_bfg_ntn_id;


  -- Added by Prajesh: T_MLI_8_ADDRESS and C_ADDRESS for GSCE-175763 Story
  TYPE T_MLI_8_LOCATIONS IS RECORD
  (   
      loc_id bfg_locations.loc_id%TYPE,
      loc_room bfg_locations.loc_room%TYPE,
      loc_floor bfg_locations.loc_floor%TYPE,
      loc_subpremise bfg_locations.loc_subpremise%TYPE
  );

  v_locations T_MLI_8_LOCATIONS;
  

  CURSOR C_LOCATION IS
    SELECT
      bfg_locations.loc_id,
      bfg_locations.loc_room,
      bfg_locations.loc_floor,
      bfg_locations.loc_subpremise
    FROM MANAGED_DEVICES managed_devices
    JOIN BFG_NETWORK_NODES bfg_network_nodes
    ON bfg_network_nodes.ntn_id = managed_devices.bfg_ntn_id
    JOIN BFG_LOCATIONS bfg_locations
    ON bfg_locations.loc_id = bfg_network_nodes.ntn_loc_id
    WHERE managed_devices.bfg_ntn_id = p_bfg_ntn_id;



    FUNCTION GET_DEVICE_CATEGORY(p_device_category_flag v_device.device_category_flag%type default null) return varchar2
    IS
        v_device_category Varchar2(10):=null;
    BEGIN
        BEGIN
            SELECT DECODE(v_device.device_category_flag,0,'Managed',1,'Unmanaged','Unknown') INTO v_device_category FROM DUAL;
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    return v_device_category;
    END GET_DEVICE_CATEGORY;    
    FUNCTION GET_DEVICE_STAT(p_lc_key v_device.lc_key%type default null) return log_classes.description%type
    IS
        v_description log_classes.description%type:=null;
    BEGIN
        BEGIN
            SELECT description INTO v_description FROM log_classes where key=p_lc_key;
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    return v_description;
    END GET_DEVICE_STAT; 
    FUNCTION GET_PC_NAME(p_pc_id v_device.pc_id%TYPE default null) RETURN polling_classes.name%TYPE
    IS 
        v_pc_name polling_classes.name%TYPE:=null;
    BEGIN
        BEGIN
            SELECT name INTO v_pc_name FROM polling_classes WHERE id = p_pc_id;
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    return v_pc_name;
    END GET_PC_NAME;
    
    FUNCTION GET_NETWORK_PREFIX (p_net_name networks.name%type) RETURN networks.prefix%type
    IS
        v_net_prefix networks.prefix%type:=null;
    BEGIN
    
        BEGIN
            SELECT prefix INTO v_net_prefix FROM NETWORKS  WHERE name=p_net_name AND CEASE_DATE is null;
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;

    return v_net_prefix;
    END GET_NETWORK_PREFIX;
    
    FUNCTION GET_REGION_CODE(p_bfg_ntn_id v_device.bfg_ntn_id%TYPE default null) RETURN VARCHAR2
    IS
        v_region_code VARCHAR2(4000):='';
    BEGIN
          BEGIN
             SELECT NVL(region.get_region_code(p_bfg_ntn_id),'')
               INTO v_region_code
               FROM dual;
          EXCEPTION
          WHEN no_data_found THEN
            NULL;
          END;
    return v_region_code;
    END GET_REGION_CODE;    
    
    FUNCTION GET_DT_DESCR(p_dt_key v_device.dt_key%TYPE default null) RETURN device_types.description%TYPE
    IS
        v_dt_descr device_types.description%TYPE:=null;
    BEGIN
         BEGIN
            SELECT description INTO v_dt_descr FROM device_types WHERE KEY = p_dt_key;
        EXCEPTION
            WHEN no_data_found THEN
            NULL;
        END;
  return v_dt_descr;
  END GET_DT_DESCR; 
  
  FUNCTION GET_DR_DESCR(p_dr_key v_device.dr_key%TYPE default null) RETURN device_roles.description%TYPE
  IS
    v_dr_descr device_roles.description%TYPE:=null;
  BEGIn 
    BEGIN
     SELECT description INTO v_dr_descr FROM device_roles WHERE KEY = p_dr_key;
    EXCEPTION
        WHEN no_data_found THEN
        NULL;
    END;
  return v_dr_descr;
  END GET_DR_DESCR;
  
  FUNCTION GET_DEVICE_OPS(p_type VARCHAR2 default null, p_operation VARCHAR2 default null) RETURN VARCHAR2
  IS  
  BEGIN

    /* Return null operation for probe level notification */
    IF( p_type = 'S' AND p_test_id IS NULL) 
      THEN
        /* Decode the operation */
        CASE p_operation
            WHEN 'I' THEN return 'addInventory';
            WHEN 'U' THEN return 'updateInventory';
            WHEN 'S' THEN return 'searchInventory';
            WHEN 'T' THEN return 'interfaceUpdate'; -- GSCE172133 (Interface Tagging) (ichsan: I suggest tagInterface actually)
            ELSE          return 'ceaseInventory';
        END CASE;
     END IF;
  return null;
  END GET_DEVICE_OPS;
  
  PROCEDURE GET_BFG_DETAILS(
        p_bfg_ntn_id IN v_device.bfg_ntn_id%TYPE DEFAULT NULL,
        p_bfg_product_type OUT BFG_NODE_PRODUCT_TYPES.NDT_NAME%TYPE ,
        p_bfg_product_type_id OUT BFG_NODE_PRODUCT_TYPES.NDT_ID%TYPE ,
        p_bfg_product_name OUT BFG_NODE_PRODUCTS.NDP_NAME%TYPE ,
        p_bfg_product_id OUT BFG_NODE_PRODUCTS.NDP_ID%TYPE ,
        p_bfg_source_system OUT BFG_NETWORK_NODES.NTN_SOURCE_SYSTEM%TYPE,
        p_bfg_ntn_type OUT BFG_NETWORK_NODES.NTN_TYPE%TYPE,
        p_bfg_ntn_server_os OUT BFG_NETWORK_NODES.NTN_SERVER_OPERATING_SYSTEM%TYPE, 
        p_bfg_ntn_os_vnumber OUT BFG_NETWORK_NODES.NTN_OS_VERSION_NUMBER%TYPE,
        p_bfg_ntn_role OUT BFG_NETWORK_NODES.NTN_ROLE%TYPE,
        p_bfg_sit_id OUT bfg_sites.SIT_ID%TYPE,
        p_bfg_sit_name OUT bfg_sites.SIT_NAME%TYPE
        )
  IS
  
  BEGIN
    BEGIN
        SELECT 
            BNPT.NDT_NAME, 
            BNPT.NDT_ID,
            BNP.NDP_NAME,
            BNP.NDP_ID,
            BFG_NET.ntn_source_system,
            BFG_NET.ntn_type,
            BFG_NET.ntn_server_operating_system,
            BFG_NET.ntn_os_version_number,
            BFG_NET.ntn_role,
            BS.sit_id,
            BS.sit_name
        INTO 
            p_bfg_product_type,
            p_bfg_product_type_id,
            p_bfg_product_name,
            p_bfg_product_id,
            p_bfg_source_system,
            p_bfg_ntn_type,
            p_bfg_ntn_server_os,
            p_bfg_ntn_os_vnumber,
            p_bfg_ntn_role,
            p_bfg_sit_id,
            p_bfg_sit_name
        FROM
            BFG_NETWORK_NODES BFG_NET,
            BFG_NODE_PRODUCTS BNP,
            BFG_NODE_PRODUCT_TYPES BNPT,
            BFG_SITES BS
        WHERE
             BFG_NET.NTN_NDP_ID = BNP.NDP_ID
        AND  BNP.NDP_NDT_ID = BNPT.NDT_ID
        AND  BFG_NET.NTN_ID = p_bfg_ntn_id
        AND  BFG_NET.ntn_sit_id=BS.sit_id;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        NULL;
    END;
  
  END GET_BFG_DETAILS;
  
  FUNCTION GET_CONTRACT_ID(p_bfg_ntn_id v_device.bfg_ntn_id%TYPE) RETURN bfg_network_nodes.ntn_con_id%TYPE
  IS
    v_contract_id bfg_network_nodes.ntn_con_id%TYPE:=null;
  
   BEGIN
       BEGIN
         SELECT ntn_con_id
           INTO v_contract_id
           FROM bfg_network_nodes
          WHERE ntn_id = p_bfg_ntn_id;
        EXCEPTION
            WHEN no_data_found THEN
            NULL;
       END;
  return v_contract_id;
  END;
 FUNCTION GET_PARTNER_FRIENDLY_NAME(p_bfg_ntn_id v_device.bfg_ntn_id%TYPE) RETURN bfg_network_nodes.ntn_partner_friendly_name%TYPE
    IS
    v_partner_friendly_name bfg_network_nodes.ntn_partner_friendly_name%TYPE:=null;
    
    BEGIN
        BEGIN
        SELECT ntn_partner_friendly_name
            INTO v_partner_friendly_name
            FROM bfg_network_nodes
            WHERE ntn_id = p_bfg_ntn_id;
        EXCEPTION
            WHEN no_data_found THEN
            NULL;
        END;
    return v_partner_friendly_name;
  END;
PROCEDURE CREATE_PROBES
  (
    p_doc             IN XMLDOM.DOMDOCUMENT,
    p_md_id           IN NUMBER,
    p_test_id         IN NUMBER,
    p_operation       IN VARCHAR,
    p_managed_devices IN XMLDOM.DOMNODE )
IS
  p_name xmlDom.domNode;
  p_name1 xmlDom.domNode;
  
  v_prob_state Varchar2(20);

BEGIN
    p_name := dom.create_element_after(p_doc, p_managed_devices,'mlidata:probes');
    --nmdb.log_activity('DEBUG','T','p_md_id='||p_md_id||',p_test_id='||p_test_id||',p_operation='||p_operation);
  FOR crec IN
  (SELECT ID,TEST_NAME,TEST_TYPE,TEST_PROTOCOL,SOURCE_PORT,SOURCE_IP_ADDRESS,TARGET_IP_ADDRESS,TARGET_PORT,TEST_FREQUENCY,NO_OF_PACKETS,SERVICE_CLASS,TEST_START_TIME,TEST_LIFE,PACKETS_SIZE,PACKETS_INTERVAL,TARGET_URL,DNS_NAME_SERVER
     FROM mli_probes
    WHERE md_id_source = p_md_id
    AND   id           = nvl(p_test_id,id)
  )
  LOOP

   /* The current probe is added , updated or ceased */
     IF p_test_id is null 
        THEN
        v_prob_state :='';
     ELSIF p_operation = 'I'
        THEN
             v_prob_state := 'ProbeCreated';
    ELSIF p_operation = 'U'
        THEN
            v_prob_state := 'ProbeUpdated';
    ELSif p_operation ='S'
        THEN
        v_prob_state :='';
    else
        v_prob_state := 'ProbeCeased';
    END IF;

    p_name1 := dom.create_element_after(p_doc, p_name,'mlidata:probe');
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:testID',crec.id);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:testName',crec.test_name);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:testType',crec.test_type);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:state',v_prob_state);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:testProtocol',crec.test_protocol);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:sourceIPAddress',crec.source_ip_address);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:sourcePortNumber',crec.source_port);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:targetIPAddress',crec.target_ip_address);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:targetPortNumber',crec.target_port);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:frequency',crec.test_frequency);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:serviceClass',crec.service_class);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:startTime',crec.test_start_time);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:testLife',crec.test_life);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:packetCount',crec.NO_OF_PACKETS);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:packetSize',crec.packets_size);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:packetInterval',crec.packets_interval);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:targetURL',crec.TARGET_URL);
    dom.create_element_with_text_after(p_doc,p_name1,'mlidata:dnsNameServer',crec.dns_name_server);
  END LOOP;
  
  FOR crec1 IN (SELECT ID,
                                 TEST_NAME,
                                 TEST_TYPE,
                                 TEST_PROTOCOL,
                                 SOURCE_PORT,
                                 SOURCE_IP_ADDRESS,
                                 TARGET_IP_ADDRESS,
                                 TARGET_PORT,
                                 TEST_FREQUENCY,
                                 NO_OF_PACKETS,
                                 SERVICE_CLASS,
                                 TEST_START_TIME,
                                 TEST_LIFE,
                                 PACKETS_SIZE,
                                 PACKETS_INTERVAL,
                                 TARGET_URL
                            FROM mli_probes_deleted
                           WHERE id = p_test_id)
            LOOP
               v_prob_state := 'ProbeCeased';               
               p_name1 := dom.create_element_after(p_doc, p_name,'mlidata:probe');
               
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:testID',
                                                   crec1.id);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:testName',
                                                   crec1.test_name);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:testType',
                                                   crec1.test_type);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:state',
                                                   v_prob_state);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:testProtocol',
                                                   crec1.test_protocol);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:sourceIPAddress',
                                                   crec1.source_ip_address);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:sourcePortNumber',
                                                   crec1.source_port);

               /*IF (crec1.test_type IN ('http', 'dns'))
               THEN
                  dom.create_element_with_text_after (
                     p_doc,
                     p_name1,
                     'mlidata:targetIPAddress',
                     crec1.target_ip_address || '_' || crec1.TARGET_URL);
               ELSE*/
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:targetIPAddress',
                                                   crec1.target_ip_address);
               --END IF;
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:targetPortNumber',
                                                   crec1.target_port);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:frequency',
                                                   crec1.test_frequency);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:serviceClass',
                                                   crec1.service_class);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:startTime',
                                                   crec1.test_start_time);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:testLife',
                                                   crec1.test_life);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:packetCount',
                                                   crec1.NO_OF_PACKETS);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:packetSize',
                                                   crec1.packets_size);
               dom.create_element_with_text_after (p_doc,
                                                   p_name1,
                                                   'mlidata:packetInterval',
                                                   crec1.packets_interval);
               dom.create_element_with_text_after(p_doc,
                                                  p_name1,
                                                  'mlidata:targetURL',
                                                  crec1.TARGET_URL);
            END LOOP;
  
  /*Added Ended for TNR013 MLI 5.0 Netrep by Ramyajit*/
END create_probes; 

PROCEDURE create_ptps (p_doc            IN XMLDOM.DOMDOCUMENT,
                        p_node           IN XMLDOM.DOMNODE,
                        p_md_id          IN NUMBER,
                        p_interface_id   IN NUMBER,
                        p_operation      IN VARCHAR)
    IS
        v_physicalTerminationPoints xmlDom.domNode;
        v_ptp               xmlDom.domNode;
        v_aliasNames        xmlDom.domNode;
        v_resourceDates     xmlDom.domNode;
        v_transmissionParameters     xmlDom.domNode;
        v_tmp               xmlDom.domNode;
        v_management_type   VARCHAR2 (4000);
        v_interface_oper    VARCHAR2 (50) := NULL;
        v_count             NUMBER := 0;


    PROCEDURE create_nvs (p_doc     IN xmlDom.domDocument,
                            p_name    IN VARCHAR2,
                            p_value   IN VARCHAR2,
                            p_node    IN xmlDom.domNode)
    IS
        v_nvs   xmlDom.domNode;
    BEGIN
        v_nvs := dom.create_element_after (p_doc, p_node, 'mlidata:parameter');
        dom.create_element_with_text_after (p_doc, v_nvs, 'mlidata:key', p_name);
        v_nvs := dom.create_element_with_text_after (p_doc, v_nvs, 'mlidata:value', p_value);
    END;

BEGIN
    SELECT COUNT(*) INTO v_count FROM interfaces
    WHERE md_id = p_md_id AND id = NVL (p_interface_id, id);
    IF( v_count > 0 ) THEN
      v_physicalTerminationPoints := dom.create_element_after (p_doc, p_node, 'mlidata:physicalTerminationPoints');
    END IF;

    FOR rec
        IN (SELECT id,
                   port,
                   name,
                   label,
                   configured_bandwidth,
                   actual_bandwidth,
                   duplex,
                   TO_CHAR (cease_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"')cease_date,
                   TO_CHAR (modified_date, 'yyyy-mm-dd"T"hh24:mi:ss".0Z"') modified_date,
                   management_type,
                   domain,
                   adsl_actual_upstream_speed,
                   adsl_actual_downstream_speed,
                   mib.get_interface_mib_entry (NVL (p_interface_id, id), '1.3.6.1.2.1.2.2.1.2') description,
                   NVL (domain.get_meaning ('INM', management_type), '') usage
            FROM interfaces
            WHERE md_id = p_md_id AND id = NVL (p_interface_id, id))
    LOOP

        v_interface_oper := NULL;

        IF NVL (p_interface_id, 0) = rec.id
        /* The current interface is added , updated or ceased */
        THEN
           /* Decode the operation */
           IF p_operation = 'I'
           THEN
              v_interface_oper := 'interfaceAdded';
           ELSIF p_operation = 'U'
           THEN
              v_interface_oper := 'interfaceUpdated';
       -- Start of additional operation (GSCE172133: Interface Tagging)
       ELSIF p_operation = 'T' -- Tagged
       THEN
          v_interface_oper := 'interfaceTagged'; -- TODO: Isn't it better to be interfaceTagged
       -- End of additional operation (GSCE172133: Interface Tagging)
           ELSE
              v_interface_oper := 'interfaceCeased';
           END IF;
        END IF;

        v_ptp := dom.create_element_after (p_doc, v_physicalTerminationPoints, 'mlidata:ptp');

        dom.create_element_with_text_after (p_doc,v_ptp,'mlidata:id',rec.port);

        v_aliasNames := dom.create_element_after (p_doc, v_ptp, 'mlidata:aliasNames');
        v_tmp := dom.create_element_after (p_doc, v_aliasNames, 'mlidata:aliasName');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:key', 'InterfaceName');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:value', rec.name);
        
        v_tmp := dom.create_element_after (p_doc, v_aliasNames, 'mlidata:aliasName');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:key', 'PTPOperation');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:value', v_interface_oper);
        
        v_tmp := dom.create_element_after (p_doc, v_aliasNames, 'mlidata:aliasName');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:key', 'PortID');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:value', rec.id);
        
        v_tmp := dom.create_element_after (p_doc, v_aliasNames, 'mlidata:aliasName');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:key', 'InterfaceDescription');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:value', rec.description);

        dom.create_element_with_text_after (p_doc,v_ptp,'mlidata:userLabel',rec.label);
        dom.create_element_with_text_after (p_doc,v_ptp,'mlidata:resourceState','INSTALLED');


        v_resourceDates := dom.create_element_after (p_doc, v_ptp, 'mlidata:resourceDates');
        v_tmp := dom.create_element_after (p_doc, v_resourceDates, 'mlidata:resourceDate');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:dateType', 'LAST_MODIFIED_DATE');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:dateTime', rec.modified_date);

        v_tmp := dom.create_element_after (p_doc, v_resourceDates, 'mlidata:resourceDate');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:dateType', 'CEASED_DATE');
        dom.create_element_with_text_after (p_doc, v_tmp, 'mlidata:dateTime', NVL(rec.cease_date, '1970-01-01T00:00:00'));

        dom.create_element_with_text_after (p_doc,v_ptp,'mlidata:usage',rec.usage);
        dom.create_element_with_text_after (p_doc,v_ptp,'mlidata:directionality',NVL(rec.domain, 'UNIDIRECTIONAL'));

        v_tmp := dom.create_element_after (p_doc, v_ptp, 'mlidata:transmissionParameters');
        v_transmissionParameters := dom.create_element_after (p_doc, v_tmp, 'mlidata:transmissionParameters');
        v_tmp := dom.create_element_after (p_doc, v_transmissionParameters, 'mlidata:parameters');
        
        create_nvs (p_doc,'AdministrativeSpeed', rec.configured_bandwidth, v_tmp);
        create_nvs (p_doc,'ActualSpeedRate', rec.actual_bandwidth, v_tmp);
        create_nvs (p_doc,'ActualDownstreamSpeed', rec.adsl_actual_downstream_speed, v_tmp);
        create_nvs (p_doc,'ActualupstreamSpeed', rec.adsl_actual_upstream_speed, v_tmp);
    END LOOP;
END;

/*** Main Section starts here ***/  
BEGIN

    /*** BEGIN Fetch device information ***/
    OPEN C_DEVICE;
    FETCH C_DEVICE INTO v_device;
    CLOSE C_DEVICE;
    /*** END Fetch device information ***/
	
	-- Added by Prajesh: Cursor to fetch row from BFG_ADDRESSES table for GSCE-175763 story
     /*** BEGIN Fetch BFG Address information ***/
    OPEN C_ADDRESS;
    FETCH C_ADDRESS INTO v_address;
    CLOSE C_ADDRESS;
    /*** END Fetch BFG Address information ***/

	-- Added by Prajesh: Cursor to fetch row from BFG_LOCATIONS table for GSCE-175763 story
     /*** BEGIN Fetch BFG Address information ***/
    OPEN C_LOCATION;
    FETCH C_LOCATION INTO v_locations;
    CLOSE C_LOCATION;
    /*** END Fetch BFG_LOCATIONS information ***/
	
    BEGIN
         SELECT bfg_cus_id
           INTO v_bfg_cus_id
           FROM customers
          WHERE id = v_device.cus_id;
    EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
    END;
    GET_BFG_DETAILS(v_device.bfg_ntn_id,v_bfg_product_type ,v_bfg_product_type_id,v_bfg_product_name,v_bfg_product_id ,v_bfg_source_system,v_bfg_ntn_type,v_bfg_ntn_server_os,v_bfg_ntn_os_version_num,v_bfg_ntn_role,v_bfg_site_id,v_bfg_site_name);
  v_managedElement :=dom.create_element_after(p_doc,p_managed_elements,'mlidata:managedElement');
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:id',v_device.md_id);--md_id
  v_aliasNames :=dom.create_element_after(p_doc,v_managedElement,'mlidata:aliasNames');
  
  v_aliasName1 :=dom.create_element_after(p_doc,v_aliasNames,'mlidata:aliasName');
  dom.create_element_with_text_after(p_doc,v_aliasName1,'mlidata:key','BFGDeviceId');
  dom.create_element_with_text_after(p_doc,v_aliasName1,'mlidata:value',v_device.bfg_ntn_id);--BFG Device ID
  
  v_aliasName2 :=dom.create_element_after(p_doc,v_aliasNames,'mlidata:aliasName');
  dom.create_element_with_text_after(p_doc,v_aliasName2,'mlidata:key','NetworkName');
  dom.create_element_with_text_after(p_doc,v_aliasName2,'mlidata:value',v_device.net_name);--Network Name
  
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:userLabel','');
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:owner','NMDB');
  --added for NIAB phase 2
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:namingOS',v_bfg_ntn_server_os);
  ---------------------------------
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:source','NETWORK_EMS');
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:resourceState','INSTALLED');
  --dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:serviceState',v_device.lc_key);--- ???
  v_resourceDates :=dom.create_element_after(p_doc,v_managedElement,'mlidata:resourceDates');
  
  v_resourceDate_actDate :=dom.create_element_after(p_doc,v_resourceDates,'mlidata:resourceDate');
  dom.create_element_with_text_after(p_doc,v_resourceDate_actDate,'mlidata:dateType','ACTUAL_DATE');
  dom.create_element_with_text_after(p_doc,v_resourceDate_actDate,'mlidata:resourceState','INSTALLED');
  dom.create_element_with_text_after(p_doc,v_resourceDate_actDate,'mlidata:dateTime',v_device.create_date); --Create Date
  
  v_resourceDate_modDate :=dom.create_element_after(p_doc,v_resourceDates,'mlidata:resourceDate');
  dom.create_element_with_text_after(p_doc,v_resourceDate_modDate,'mlidata:dateType','LAST_MODIFIED_DATE');
  dom.create_element_with_text_after(p_doc,v_resourceDate_modDate,'mlidata:resourceState','INSTALLED');
  dom.create_element_with_text_after(p_doc,v_resourceDate_modDate,'mlidata:dateTime',v_device.modified_date); --modified Date
  
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:operationalState',v_device.snmp_flag);--activated (y,n)
  
  --v_protocols:=dom.create_element_after(p_doc,v_managedElement,'mlidata:protocols');
  --dom.create_element_with_text_after(p_doc,v_protocols,'mlidata:pollingClass',GET_PC_NAME(v_device.pc_id));--Polling class

  create_probes(p_doc,p_md_id,p_test_id,p_operation,v_managedElement);

  v_logicalLocation:= dom.create_element_after(p_doc,v_managedElement,'mlidata:logicalLocation');
  dom.create_element_with_text_after(p_doc,v_logicalLocation,'mlidata:siteId',v_bfg_site_id);
  dom.create_element_with_text_after(p_doc,v_logicalLocation,'mlidata:name',v_bfg_site_name);

  -- Added by Prajesh: Locations attribute from BFG_LOCATIONS table for GSCE-175763 story
  v_addressRef:= dom.create_element_after(p_doc,v_logicalLocation,'mlidata:addressRef');
  -- TODO: Karyn | Add mandatory attribute
  -- <ssp:addressKey></ssp:addressKey>
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:addressKey','');
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:street',v_address.adr_street_name);
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:city',v_address.adr_town);
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:countyStateProvince',v_address.adr_county);
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:country',v_address.adr_country);
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:postCode',v_address.adr_post_zip_code);
	-- TODO: Karyn | Add mandatory attributes
	-- <ssp:dateTimeCreated></ssp:dateTimeCreated>
	-- <ssp:virtualAddressFlag></ssp:virtualAddressFlag>
	-- <ssp:multipleoccupancyFlag></ssp:multipleoccupancyFlag>
	-- <ssp:validationLevel></ssp:validationLevel>
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:dateTimeCreated','');
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:virtualAddressFlag','');
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:multipleoccupancyFlag','');
  dom.create_element_with_text_after(p_doc,v_addressRef,'ssp:validationLevel','');


  v_resLocs:= dom.create_element_after(p_doc,v_logicalLocation,'mlidata:resourceLocations');
  v_resLoc:= dom.create_element_after(p_doc,v_resLocs,'mlidata:resourceLocation');
  v_resLoc_alternateId:= dom.create_element_after(p_doc,v_resLoc,'mlidata:alternateID');
  v_resLoc_alternateId_id:= dom.create_element_after(p_doc,v_resLoc_alternateId,'mlidata:id');
  dom.create_element_with_text_after(p_doc,v_resLoc_alternateId_id,'mlidata:id', v_locations.loc_id);
-- TODO: Karyn | Add mandatory attributes
-- <mlidata:key></mlidata:key>
-- <mlidata:value></mlidata:value>
  dom.create_element_with_text_after(p_doc,v_resLoc_alternateId_id,'mlidata:key', '');
  dom.create_element_with_text_after(p_doc,v_resLoc_alternateId_id,'mlidata:value', '' );
  
  dom.create_element_with_text_after(p_doc,v_resLoc,'mlidata:floor', v_locations.loc_floor);
  dom.create_element_with_text_after(p_doc,v_resLoc,'mlidata:section', v_locations.loc_subpremise);
  dom.create_element_with_text_after(p_doc,v_resLoc,'mlidata:room', v_locations.loc_room);

  dom.create_element_with_text_after(p_doc,v_logicalLocation,'mlidata:region',GET_REGION_CODE(v_device.bfg_ntn_id));
  -------------------------------------------------------------------------------------------------------------------------
  
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:meType',GET_DT_DESCR(v_device.dt_key) );---Device Type
  --added for NIAB phase 2
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:meModel',v_bfg_ntn_type);
  -----------------------------
  --dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:meUsage',GET_DT_DESCR(v_device.dt_key));----Device Role
  
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:meUsage',GET_DR_DESCR(v_device.dr_key));----Device Role
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:meFunction',GET_DEVICE_OPS(p_type , p_operation ));--Device Operation
  --added for NIAB phase 2
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:osVersion',v_bfg_ntn_os_version_num);
  -------------------------------------
  dom.create_element_with_text_after(p_doc,v_managedElement,'mlidata:productName',v_bfg_product_name);--BFGProduct
  
  v_meVendorExtensions:= dom.create_element_after(p_doc,v_managedElement,'mlidata:meVendorExtensions');
  v_additionalInfo:= dom.create_element_after(p_doc,v_meVendorExtensions,'mlidata:additionalInfo');
  
  --v_additionalInfo_DeviceOp:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
 -- dom.create_element_with_text_after(p_doc,v_additionalInfo_DeviceOp,'mlidata:key','DeviceOperation');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_DeviceOp,'mlidata:value',GET_DEVICE_OPS(p_type , p_operation ));--Device Operation
  
  v_additionalInfo_BFGProdID:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProdID,'mlidata:key','BFGProductID');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProdID,'mlidata:value',v_bfg_product_id);--BFGProductID
  
  --GET_BFG_DETAILS( v_device.bfg_ntn_id,v_bfg_product_type ,v_bfg_product_type_id,v_bfg_product_name,v_bfg_product_id ,v_bfg_source_system);
  
  --v_additionalInfo_BFGProd:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProd,'mlidata:key','BFGProduct');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProd,'mlidata:value',v_bfg_product_name);--BFGProduct
  
  v_additionalInfo_BFGProdTyID:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProdTyID,'mlidata:key','BFGProductTypeID');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProdTyID,'mlidata:value',v_bfg_product_type_id);--BFGProductTypeID
  
  v_additionalInfo_BFGProdTy:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProdTy,'mlidata:key','BFGProductType');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_BFGProdTy,'mlidata:value',v_bfg_product_type);--BFGProductType
  
  v_additionalInfo_NTNSrcSys:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_NTNSrcSys,'mlidata:key','NTNSourceSystem');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_NTNSrcSys,'mlidata:value',v_bfg_source_system);--NTNSourceSystem
  
  v_additionalInfo_Prefix:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_Prefix,'mlidata:key','Prefix');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_Prefix,'mlidata:value',GET_NETWORK_PREFIX(v_device.net_name));--Prefix
  
  --v_additionalInfo_Prop_Status:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_Prop_Status,'mlidata:key','Prop_Status');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_Prop_Status,'mlidata:value','');--Prop_Status
  
  v_additionalInfo_ContractID:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_ContractID,'mlidata:key','ContractID');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_ContractID,'mlidata:value',GET_CONTRACT_ID(v_device.bfg_ntn_id));--ContractID
  
  v_additionalInfo_CustomerId:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_CustomerId,'mlidata:key','CustomerId');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_CustomerId,'mlidata:value',v_bfg_cus_id);--CustomerId
  
  v_additionalInfo_CustomerName:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_CustomerName,'mlidata:key','CustomerName');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_CustomerName,'mlidata:value',v_device.cus_name);--CustomerName
  
  --v_additionalInfo_MD_Comment:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_MD_Comment,'mlidata:key','MD_Comment');
  --dom.create_element_with_text_after(p_doc,v_additionalInfo_MD_Comment,'mlidata:value',v_device.md_comment);--MD_Comment
  
  v_additionalInfo_PC_ID:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_PC_ID,'mlidata:key','PC_ID');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_PC_ID,'mlidata:value',v_device.PC_ID);--PC_ID
  
  v_additionalInfo_PC_NAME:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_PC_NAME,'mlidata:key','PC_NAME');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_PC_NAME,'mlidata:value',GET_PC_NAME(v_device.pc_id));--Polling Class Name
  
  v_additionalInfo_Dev_Cat:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_Dev_Cat,'mlidata:key','DeviceCategory');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_Dev_Cat,'mlidata:value',GET_DEVICE_CATEGORY(v_device.device_category_flag));--Device Cateory Flag
  
  v_additionalInfo_Dev_Stat:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_Dev_Stat,'mlidata:key','DeviceStatus');
  dom.create_element_with_text_after(p_doc,v_additionalInfo_Dev_Stat,'mlidata:value',GET_DEVICE_STAT(v_device.lc_key));--Device Cateory Flag
  
  v_additionalInfo_SNE_ID:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
    dom.create_element_with_text_after(p_doc,v_additionalInfo_SNE_ID,'mlidata:key','PartnerFriendlyName');
    dom.create_element_with_text_after(p_doc,v_additionalInfo_SNE_ID,'mlidata:value',GET_PARTNER_FRIENDLY_NAME(v_device.bfg_ntn_id));--SNE_ID
  
    v_additionalInfo_NTNRole:= dom.create_element_after(p_doc,v_additionalInfo,'mlidata:additionalInfo');
    dom.create_element_with_text_after(p_doc,v_additionalInfo_NTNRole,'mlidata:key','NTN_ROLE');
    dom.create_element_with_text_after(p_doc,v_additionalInfo_NTNRole,'mlidata:value',v_bfg_ntn_role);--NTN Role
    
    -- GSCE172133
  select count(*) into v_count from mli_destination_mapping where LOWER(destination_id) = LOWER(p_Destination_Id) and entity = 'I' and active = 'Y';
  IF (v_count>0)
  THEN
    --For sending all interfaces in device level xml when device cease operation happens. For Device Add and modify no interfaces
    IF (p_entity = 'D')
    THEN
        v_Interface_id := 0;
    ELSE
        v_Interface_id := p_interface_id;
    END IF;

    create_ptps (p_doc,
                 v_managedElement,
                 p_md_id,
                 v_Interface_id,
                 p_operation);
  END IF;
-- GSCE172133

  v_IPAddresses:= dom.create_element_after(p_doc,v_managedElement,'mlidata:managementIPAddresses');
  v_ipAddress_mgmtIP:= dom.create_element_after(p_doc,v_IPAddresses,'mlidata:ipAddress');
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:ipName','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:ipValue',v_device.ip_address);--Mgmt IP Address
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:dnsName',v_device.host_name);--Mgmt Host Name
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:dnsNameAlias','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:subnetworkMask','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:ippool','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_mgmtIP,'adli:ipType','Management');
  
  v_ipAddress_custIP:= dom.create_element_after(p_doc,v_IPAddresses,'mlidata:ipAddress');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:ipName','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:ipValue',v_device.customer_ip_address);
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:dnsName',v_device.cust_host_name);
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:dnsNameAlias','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:subnetworkMask','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:ippool','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIP,'adli:ipType','Customer');
  
  v_ipAddress_custIPv6:= dom.create_element_after(p_doc,v_IPAddresses,'mlidata:ipAddress');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:ipName','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:ipValue',v_device.cus_ip_address_ipv6);
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:dnsName','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:dnsNameAlias','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:subnetworkMask','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:ippool','');
  dom.create_element_with_text_after(p_doc,v_ipAddress_custIPv6,'adli:ipType','CustomerIPv6');


END;


  

  FUNCTION  CREATE_MLI_8_0_RESPONSE
    (
      p_msg_id         IN NUMBER,
      p_md_id          IN NUMBER,
      p_operation      IN VARCHAR DEFAULT NULL,
      p_type           IN VARCHAR DEFAULT NULL,
      p_interface_id   IN NUMBER DEFAULT NULL,
      p_destination_id IN VARCHAR DEFAULT NULL,
      p_test_id        IN NUMBER DEFAULT NULL,
      p_entity         IN VARCHAR DEFAULT NULL,
      p_hc_id          IN NUMBER DEFAULT NULL,
      p_Salsa_Id       IN VARCHAR DEFAULT NULL,
      p_foi_id         IN NUMBER
      )
    RETURN CLOB
  IS
  
  v_logicalInventory xmlDom.domNode;
  v_managementDomains xmlDom.domNode;
  v_managementDomain xmlDom.domNode;
  v_managedElements xmlDom.domNode;
  v_header xmlDom.domNode;
  v_mlidata_name xmlDom.domNode;
  v_mlidata_rdn xmlDom.domNode;
  
  v_output_xml CLOB;
  v_doc xmlDom.domDocument := xmldom.newDomdocument;
    


  PROCEDURE create_header
    (
      p_doc    IN XMLDOM.DOMDOCUMENT,
      p_header IN xmlDom.domNode,
      p_destination_id In VARCHAR2)
  IS
    v_tmp xmlDom.domNode;
    v_tmp_1 xmlDom.domNode;
    v_ptp xmlDom.domNode;

  BEGIN

    v_tmp   := dom.create_element_after(v_doc, p_header, 'head:standardHeader');
    v_tmp_1 :=dom.create_element_after(v_doc, v_tmp, 'head:e2e');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:E2EDATA','');
    v_tmp_1 := dom.create_element_after(v_doc, v_tmp,'head:serviceState');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:stateCode','OK');
    v_tmp_1 := dom.create_element_after(v_doc, v_tmp, 'head:serviceAddressing');
    dom.create_element_with_text_after(v_doc, v_tmp_1, 'head:from','http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');
    v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:to');
    dom.create_element_with_text_after(v_doc,v_ptp,'head:address','http://capabilities.nat.bt.com/ManageLogicalInventory/'|| p_destination_id);
    v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:replyTo');
    dom.create_element_with_text_after(v_doc,v_ptp,'head:address','http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');    
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:messageId',p_msg_id);
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:serviceName','http://capabilities.nat.bt.com/ManageLogicalInventory');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:action','inventoryNotification');    
    v_tmp_1 := dom.create_element_after(v_doc, v_tmp, 'head:serviceSpecification');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:payloadFormat','XML');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:version','8.0');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:revision','');  
    END create_header;


BEGIN
  

  v_header := dom.create_element_after (v_doc, xmlDom.makeNode (v_doc),'mlidata:inventory');
  
  dom.create_attribute_for(v_doc,v_header,'xsi:schemaLocation','http://collaborate.bt.com/svn/sdkrepo/pbp/MLI/tags/8/ManageLogicalInventoryData/ ManageLogicalInventoryData.xsd');
  dom.create_attribute_for(v_doc,v_header,'xmlns:ssp1','https://collaborate.bt.com/svn/edm/ssp/trunk/UnstructuredAddress.xsd');
  dom.create_attribute_for(v_doc,v_header,'xmlns:ssp','https://collaborate.bt.com/svn/edm/ssp/trunk/Address.xsd');
  dom.create_attribute_for(v_doc,v_header,'xmlns:adli','https://collaborate.bt.com/svn/edm/adli/IPAddress');
  dom.create_attribute_for(v_doc,v_header,'xmlns:xsi','http://www.w3.org/2001/XMLSchema-instance');
  dom.create_attribute_for(v_doc,v_header,'xmlns:head','http://wsi.nat.bt.com/2005/06/StandardHeader/');  
  dom.create_attribute_for(v_doc,v_header,'xmlns:mlidata','http://collaborate.bt.com/svn/sdkrepo/pbp/MLI/tags/8/ManageLogicalInventoryData/');
 

  create_header(v_doc,v_header,p_destination_id);
  
    
  v_logicalInventory := dom.create_element_after (v_doc,v_header,'mlidata:logicalInventory');
  dom.create_attribute_for(v_doc,v_logicalInventory,'messageType','Notification');
  dom.create_element_with_text_after(v_doc,v_logicalInventory,'mlidata:numberOfRecords','1');
  dom.create_element_with_text_after(v_doc,v_logicalInventory,'mlidata:startIndex','1');
  v_managementDomains := dom.create_element_after(v_doc, v_logicalInventory,'mlidata:managementDomains');
  v_managementDomain  := dom.create_element_after(v_doc, v_managementDomains,'mlidata:managementDomain');
  v_mlidata_name := dom.create_element_after(v_doc, v_managementDomain,'mlidata:name');
  v_mlidata_rdn := dom.create_element_after(v_doc, v_mlidata_name,'mlidata:rdn');
  dom.create_element_with_text_after(v_doc,v_mlidata_rdn,'mlidata:type','AID');
  dom.create_element_with_text_after(v_doc,v_mlidata_rdn,'mlidata:value','');
  dom.create_element_with_text_after(v_doc,v_managementDomain,'mlidata:id','');
  v_managedElements  :=dom.create_element_after(v_doc,v_managementDomain,'mlidata:managedElements');
  
  GET_MLI_8_0_DEVICE( v_doc, v_managedElements, p_md_id, p_type, p_operation, p_test_id, p_interface_id, p_destination_id, p_entity);
  
  dbms_lob.createtemporary (v_output_xml,TRUE);
  dom.get_xml (v_doc,v_output_xml);
  dom.free_document (v_doc);
  RETURN v_output_xml;
END CREATE_MLI_8_0_RESPONSE;
  /*****************END   Function CREATE_MLI_8_0_RESPONSE*****************/

FUNCTION  CREATE_MLI_8_0_SEARCH_DEV(p_bfg_ntn_id IN managed_devices.bfg_ntn_id%type,p_destination_id In VARCHAR2,p_message_id IN VARCHAR2) RETURN CLOB

IS
  v_header xmlDom.domNode;
  v_logicalInventory xmlDom.domNode;
  v_managementDomains xmlDom.domNode;
  v_managementDomain xmlDom.domNode;
  v_managedElements xmlDom.domNode;
  v_mlidata_name xmlDom.domNode;
  v_mlidata_rdn  xmlDom.domNode;
  v_output_xml CLOB;
  v_doc xmlDom.domDocument := xmldom.newDomdocument;
  v_message_id mli_notifications.id%type;
  v_count Number(10);
  procedure create_header 
    (
      p_doc    IN XMLDOM.DOMDOCUMENT,
      p_header IN xmlDom.domNode ,
      p_destination_id In VARCHAR2,
      p_message_id IN VARCHAR2) 
  IS
    v_tmp xmlDom.domNode;
    v_tmp_1 xmlDom.domNode;
    v_ptp xmlDom.domNode;
  
  BEGIN
    
    v_tmp   := dom.create_element_after(v_doc, p_header, 'head:standardHeader');
    v_tmp_1 :=dom.create_element_after(v_doc, v_tmp, 'head:e2e');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:E2EDATA','');
    v_tmp_1 := dom.create_element_after(v_doc, v_tmp,'head:serviceState');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:stateCode','OK');
    v_tmp_1 := dom.create_element_after(v_doc, v_tmp, 'head:serviceAddressing');
    dom.create_element_with_text_after(v_doc, v_tmp_1, 'head:from','http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');
    v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:to');
    dom.create_element_with_text_after(v_doc,v_ptp,'head:address','http://capabilities.nat.bt.com/ManageLogicalInventory/'||p_destination_id);
    v_ptp := dom.create_element_after(v_doc, v_tmp_1, 'head:replyTo');
    dom.create_element_with_text_after(v_doc,v_ptp,'head:address','http://capabilities.nat.bt.com/ManageLogicalInventory/APP06104');    
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:messageId',p_message_id);
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:serviceName','http://capabilities.nat.bt.com/ManageLogicalInventory');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:action','inventoryNotification');    
    v_tmp_1 := dom.create_element_after(v_doc, v_tmp, 'head:serviceSpecification');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:payloadFormat','XML');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:version','8.0');
    dom.create_element_with_text_after(v_doc,v_tmp_1,'head:revision','');  
        
    EXCEPTION
    WHEN OTHERS THEN  null;
    END create_header;


BEGIN
    

  v_header := dom.create_element_after (v_doc, xmlDom.makeNode (v_doc),'mlidata:inventory');
  dom.create_attribute_for(v_doc,v_header,'xsi:schemaLocation','http://collaborate.bt.com/svn/sdkrepo/pbp/MLI/tags/8/ManageLogicalInventoryData/ ManageLogicalInventoryData.xsd');
  dom.create_attribute_for(v_doc,v_header,'xmlns:ssp1','https://collaborate.bt.com/svn/edm/ssp/trunk/UnstructuredAddress.xsd');
  dom.create_attribute_for(v_doc,v_header,'xmlns:ssp','https://collaborate.bt.com/svn/edm/ssp/trunk/Address.xsd');
  dom.create_attribute_for(v_doc,v_header,'xmlns:adli','https://collaborate.bt.com/svn/edm/adli/IPAddress');
  dom.create_attribute_for(v_doc,v_header,'xmlns:xsi','http://www.w3.org/2001/XMLSchema-instance');
  dom.create_attribute_for(v_doc,v_header,'xmlns:head','http://wsi.nat.bt.com/2005/06/StandardHeader/');  
  dom.create_attribute_for(v_doc,v_header,'xmlns:mlidata','http://collaborate.bt.com/svn/sdkrepo/pbp/MLI/tags/8/ManageLogicalInventoryData/');



 create_header(v_doc,v_header,p_destination_id,p_message_id);
  
 BEGIN
    Select count(*) into v_count from managed_devices where bfg_ntn_id=p_bfg_ntn_id;
  EXCEPTION
  WHEN OTHERS THEN null;
  END;
    
  v_logicalInventory := dom.create_element_after (v_doc,v_header,'mlidata:logicalInventory');
  dom.create_attribute_for(v_doc,v_logicalInventory,'messageType','Notification');
  dom.create_element_with_text_after(v_doc,v_logicalInventory,'mlidata:numberOfRecords',v_count);
  dom.create_element_with_text_after(v_doc,v_logicalInventory,'mlidata:startIndex','1');
  v_managementDomains := dom.create_element_after(v_doc, v_logicalInventory,'mlidata:managementDomains');
  v_managementDomain  := dom.create_element_after(v_doc, v_managementDomains,'mlidata:managementDomain');
  v_mlidata_name := dom.create_element_after(v_doc, v_managementDomain,'mlidata:name');
  v_mlidata_rdn := dom.create_element_after(v_doc, v_mlidata_name,'mlidata:rdn');
  dom.create_element_with_text_after(v_doc,v_mlidata_rdn,'mlidata:type','AID');
  dom.create_element_with_text_after(v_doc,v_mlidata_rdn,'mlidata:value','');
  dom.create_element_with_text_after(v_doc,v_managementDomain,'mlidata:id','');
  v_managedElements  :=dom.create_element_after(v_doc,v_managementDomain,'mlidata:managedElements');
  
  For c_rec IN (select id from managed_devices where bfg_ntn_id=p_bfg_ntn_id)
  LOOP
  
  -- Added by Prajesh: New p_bfg_ntn_id arguement inside GET_MLI_8_0_DEVICE proc
  GET_MLI_8_0_DEVICE( v_doc, v_managedElements, c_rec.id, 'S', 'S', null, null, null, null, p_bfg_ntn_id);
  
  END LOOP;
  
  dbms_lob.createtemporary (v_output_xml,TRUE);
  dom.get_xml (v_doc,v_output_xml);
  dom.free_document (v_doc);

                         
RETURN v_output_xml;                         

END CREATE_MLI_8_0_SEARCH_DEV;
   /******************Start Procedure Proc_Generate_Notifications*********************/
   PROCEDURE Generate_Notifications (p_destination_id IN VARCHAR2)
   IS
      -----------------------------------------------------------------------------------------
      -- Program Unit Name   : Generate_Notifications

      -- Program Unit Type   : Procedure
      --  Description        : procedure is used to insert data into MLI_NOTIFICATION table and delete those data of MLI_SUBSCRIBED_DEVICES table

      -- MODIFICATION HISTORY

      -- Version      Person        Date        Comments

      -- ---------    ------      --------    -----------------------------------------------------
      --     1.0      Ramyajit    30/06/2010  Initial Version

      -- --------------------------------------------------------------------------------------
      v_output_xml   MLI_NOTIFICATIONS.NOTIFICATION_TXT%TYPE;
      v_Message_Id   NUMBER (10);
      v_count        NUMBER (4) := 0;
      v_threshold    NUMBER (4) := 0;
      soapenv        VARCHAR2 (2000) := NULL;
      soapenv_end    VARCHAR2 (200) := NULL;
        v_ack_status   MLI_NOTIFICATIONS.ACK_STATUS%TYPE := NULL;
      v_ack_time     MLI_NOTIFICATIONS.ACK_TIME%TYPE := NULL;
   BEGIN
      v_count := 0;

      BEGIN
         SELECT TO_NUMBER (PARM_VALUE)
           INTO v_threshold
           FROM NMDB_PARAMETERS
          WHERE PARM_NAME = 'NOTIFICATIONSENDQTY';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_threshold := 101;
      END;

      /* FOR crec IN ( SELECT DISTINCT MSD.Device_Id,MSD.Interface_Id,MSD.Operation,MSD.Destination_Id,MSD.Test_Id,MSD.Chassis_Id,MSD.Entity,MD.Mli_Version,MD.Salsa_Id, MSD.UPD_WHEN, MSD.foi_id
                             FROM  MLI_SUBSCRIBED_DEVICES MSD,
                                   MLI_DESTINATIONS MD
                             WHERE MSD.DESTINATION_ID = MD.DESTINATION_ID)*/
      /*Added on 03/10/2011 by Ramyajit for not generating duplicate notifications*/
      nmdb.debug (
         'mli.generate_notifications : Start of generate notification job');
      soapenv :=
         '<soapEnv:Envelope xmlns:soapEnv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soapEnc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><soapEnv:Body><inventoryNotification xmlns="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09" xmlns:acti="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/CCM/Activities" xmlns:agre="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/CCM/Agreements" xmlns:base="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/CCM/BaseTypes" xmlns:plac="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/CCM/Places" xmlns:serv="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/CCM/Services" xmlns:filt="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/CCM/Standards/FilterSearchPattern" xmlns:mtos="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/MTOSI" xmlns:stru="http://capabilities.nat.bt.com/xsd/ManageLogicalInventory/2009/09/09/MTOSI/Structs" xmlns:head="http://wsi.nat.bt.com/2005/06/StandardHeader/">';
      soapenv_end :=
         '</inventoryNotification></soapEnv:Body></soapEnv:Envelope>';

      FOR crec
         IN (  SELECT id,
                      device_id,
                      interface_id,
                      operation,
                      destination_id,
                      test_id,
                      chassis_id,
                      entity,
                      mli_version,
                      salsa_id,
                      upd_when,
                      foi_id
                 FROM (SELECT MSD.Id,
                              MSD.Device_Id,
                              MSD.Interface_Id,
                              MSD.Operation,
                              MSD.Destination_Id,
                              MSD.Test_Id,
                              MSD.Chassis_Id,
                              MSD.Entity,
                              MD.Mli_Version,
                              MD.Salsa_Id,
                              MSD.UPD_WHEN,
                              MSD.foi_id,
                              ROW_NUMBER ()
                              OVER (
                                 PARTITION BY msd.device_id,
                                              msd.interface_id,
                                              msd.operation,
                                              msd.destination_id,
                                              msd.test_id,
                                              msd.chassis_id,
                                              msd.entity
                                 ORDER BY msd.id DESC)
                                 AS RANK
                         FROM MLI_SUBSCRIBED_DEVICES MSD, MLI_DESTINATIONS MD
                        WHERE     MSD.DESTINATION_ID = MD.DESTINATION_ID
                              AND MSD.DESTINATION_ID = p_destination_id) SD
                WHERE sd.RANK = 1
             ORDER BY sd.id)
      LOOP
         v_count := v_count + 1;

         -- Reinitialize so that it doesn't impact data after NIAB (GSCE172133:  Interface Tagging) [S]
         v_ack_status := NULL;
         v_ack_time := NULL;
         -- Reinitialize so that it doesn't impact data after NIAB (GSCE172133:  Interface Tagging) [E]

         BEGIN
            SELECT MLI_NOTF_SEQ.NEXTVAL INTO v_Message_Id FROM DUAL;
         END;

         IF (LOWER (crec.MLI_VERSION) = LOWER ('MLI 4.2'))
         THEN
            --Start of Addition of header for soapenv
            nmdb.debug (
                  'mli.generate_notifications : Start of creating XML for device id :'
               || crec.Device_Id);
            v_output_xml :=
               CREATE_MLI_RESPONSE (crec.Device_Id,
                                    crec.Operation,
                                    'S',
                                    crec.Interface_Id,
                                    crec.Destination_id,
                                    crec.Test_Id,
                                    crec.Entity,
                                    v_Message_Id);

            /*Added as part of fix for defect : 1447 in TNR016 for Ontario */
            IF (v_output_xml IS NOT NULL)
            THEN
               /*Remove as part of Char set upgrade issues with CLOB in T3*/
               --select LTRIM(v_output_xml,'<root>') into v_output_xml from dual;
               SELECT REPLACE (v_output_xml, '<root>', NULL)
                 INTO v_output_xml
                 FROM DUAL;

               SELECT REPLACE (v_output_xml, '</root>', NULL)
                 INTO v_output_xml
                 FROM DUAL;

               SELECT SUBSTR (v_output_xml, 0, LENGTH (v_output_xml) - 1)
                 INTO v_output_xml
                 FROM DUAL;

               v_output_xml := (soapenv || v_output_xml || soapenv_end);
               nmdb.debug (
                     'mli.generate_notifications : XML created for device id :'
                  || crec.Device_Id);
            --End of Addition of header for soapenv
            END IF;
         ELSIF (LOWER (crec.MLI_VERSION) = LOWER ('MLI 6.0'))
         THEN
            v_output_xml :=
               CREATE_MLI_6_0_RESPONSE (v_Message_Id,
                                        crec.Device_Id,
                                        crec.Operation,
                                        'S',
                                        crec.Interface_Id,
                                        crec.Destination_id,
                                        crec.Test_Id,
                                        crec.Entity,
                                        crec.Chassis_Id,
                                        crec.Salsa_Id,
                                        crec.foi_id);
         ELSIF (LOWER (crec.MLI_VERSION) = LOWER ('MLI 8.0'))
         THEN
         v_output_xml :=
               CREATE_MLI_8_0_RESPONSE (v_Message_Id,
                                        crec.Device_Id,
                                        crec.Operation,
                                        'S',
                                        crec.Interface_Id,
                                        crec.Destination_id,
                                        crec.Test_Id,
                                        crec.Entity,
                                        crec.Chassis_Id,
                                        crec.Salsa_Id,
                                        crec.foi_id);
                                        
         
         ELSE
            nmdb.debug (
                  'mli.generate_notifications : Start of creating XML for device id :'
               || crec.Device_Id);
            v_output_xml :=
               CREATE_MLI_5_0_RESPONSE (v_Message_Id,
                                        crec.Device_Id,
                                        crec.Operation,
                                        'S',
                                        crec.Interface_Id,
                                        crec.Destination_id,
                                        crec.Test_Id,
                                        crec.Entity,
                                        crec.Chassis_Id,
                                        crec.Salsa_Id,
                                        crec.foi_id);
            nmdb.debug (
                  'mli.generate_notifications : XML created for device id :'
               || crec.Device_Id);
         END IF;

         /* Inserting In MLI_NOTIFICATION table*/

         -- added by Ramyajit on 20/10/2010
         IF (v_output_xml IS NOT NULL AND LOWER (crec.MLI_VERSION) <> LOWER ('MLI 8.0'))
         THEN
            nmdb.debug (
                  'mli.generate_notifications : Inserting into MLI_NOTIFICATIONS message id :'
               || v_Message_Id);

            INSERT INTO MLI_NOTIFICATIONS (ID,
                                           DEVICE_ID,
                                           MODIFIED_DATE,
                                           NOTIFICATION_SENT,
                                           NOTIFICATION_DATE,
                                           NOTIFICATION_TXT,
                                           DESTINATION_ID,
                                           INTERFACE_ID,
                                           PROBE_ID,
                                           OPERATION,
                                           ENTITY,
                                           GENERATED_DATE)
                 VALUES (v_Message_Id,
                         crec.Device_Id,
                         SYSDATE,
                         'N',
                         NULL,
                         v_output_xml,
                         crec.Destination_Id,
                         crec.Interface_Id,
                         crec.test_id,
                         crec.Operation,
                         crec.Entity,
                         crec.UPD_WHEN);

            nmdb.debug (
                  'mli.generate_notifications : NOTIFICATION added for message id :'
               || V_MESSAGE_ID);
        ELSIF (LOWER (CREC.MLI_VERSION) = LOWER ('MLI 8.0'))
         THEN
            nmdb.debug (
                  'mli.generate_notifications : Inserting into MLI_NOTIFICATIONS message id :'
               || v_Message_Id);
            
            -- Put status (GSCE172133:  Interface Tagging) [S]
                  IF (LOWER(crec.destination_id) LIKE 'niab-%' AND crec.entity = 'I' AND crec.operation = 'T')
                  THEN
                      v_ack_status := 'processed_by_nmdb';
              v_ack_time := SYSDATE;
                  END IF;
            -- Put status (GSCE172133:  Interface Tagging) [E]

            INSERT INTO MLI_NOTIFICATIONS (ID,
                                           DEVICE_ID,
                                           MODIFIED_DATE,
                                           NOTIFICATION_SENT,
                                           NOTIFICATION_DATE,
                                           NOTIFICATION_TXT,
                                           DESTINATION_ID,
                                           INTERFACE_ID,
                                           PROBE_ID,
                                           XML_COPIED,
                                           OPERATION,
                                           ENTITY,
                                           GENERATED_DATE,
                                           ACK_STATUS, ACK_TIME)
                 VALUES (v_Message_Id,
                         crec.Device_Id,
                         SYSDATE,
                         'N',
                         NULL,
                         v_output_xml,
                         CREC.DESTINATION_ID,
                         crec.Interface_Id,
                         crec.test_id,
                         'Y',
                         crec.Operation,
                         crec.Entity,
                         crec.UPD_WHEN,
                         v_ack_status, v_ack_time);

            nmdb.debug (
                  'mli.generate_notifications : NOTIFICATION added for message id :'
               || v_Message_Id);
         END IF;

         nmdb.debug (
               'mli.generate_notifications : Deleting from MLI_SUBSCRIBED_DEVICES for DEVICE ID :'
            || crec.Device_Id);

         /*Deleting From MLI_SUBSCRIBED_DEVICES table*/
         DELETE FROM MLI_SUBSCRIBED_DEVICES
               WHERE     Destination_Id = NVL (crec.destination_id, 0)
                     AND Device_id = crec.Device_Id
                     AND NVL (Interface_id, 0) = NVL (crec.Interface_id, 0)
                     AND NVL (Test_Id, 0) = NVL (crec.Test_Id, 0)
                     AND NVL (Chassis_Id, 0) = NVL (crec.Chassis_Id, 0)
                     AND Operation = crec.Operation
                     AND Entity = crec.Entity;

         nmdb.debug (
               'mli.generate_notifications : Entries deleted from MLI_SUBSCRIBED_DEVICES for DEVICE ID :'
            || crec.Device_Id);

         IF (v_count = v_threshold)
         THEN
            EXIT;
         END IF;
      --    COMMIT;
      END LOOP;

      v_count := 0;
      nmdb.debug (
         'mli.generate_notifications : End of generate notification job');
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN;
   END Generate_Notifications;


   /******************End Procedure Generate_Notifications***********************/



   /******************Start Procedure Delete_Notifications***********************/

   PROCEDURE Delete_Notifications
   IS
      -----------------------------------------------------------------------------------------
      -- Program Unit Name   : Proc_Delete_Notifications

      -- Program Unit Type   : Procedure
      -- Description         : Procedure is used to delete data from MLI_NOTIFICATION table which are more than three days old
      -- MODIFICATION HISTORY

      -- Version      Person        Date        Comments

      -- ---------    ------      --------    -----------------------------------------------------
      --     1.0      Ramyajit    30/06/2010  Initial Version

      -- --------------------------------------------------------------------------------------

      v_Parameter   NUMBER (10) := 3;
      v_date        DATE;
   BEGIN
      BEGIN
         SELECT TO_NUMBER (Parm_Value)
           INTO v_Parameter
           FROM NMDB_PARAMETERS
          WHERE PARM_NAME = 'NOTIFICATINDELFREQ';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      /****Added on 04/01/2011 for Archiving the records into MLI_NOTIFICATIONS_ARCHIVE table which are three days old*/
      SELECT SYSDATE - v_parameter INTO v_date FROM DUAL;

      INSERT INTO MLI_NOTIFICATIONS_ARCHIVE (ID,
                                            DEVICE_ID,
                                            MODIFIED_DATE,
                                            DESTINATION_ID,
                                            OPERATION,
                                            ENTITY,
                                            GENERATED_DATE,
                      NOTIFICATION_DATE,
                      NET_NAME,
                      PROBE_ID,
                      INTERFACE_ID,
                      MSG_ID,
                      ACK_STATUS,
                      ACK_TIME)
        SELECT id,
                device_id,
                modified_date,
                destination_id,
                operation,
                entity,
                generated_date,
        NOTIFICATION_DATE,
        NET_NAME,
        PROBE_ID,
        INTERFACE_ID,
        MSG_ID,
        ACK_STATUS,
        ACK_TIME
            FROM MLI_NOTIFICATIONS
            WHERE    NOTIFICATION_SENT = 'Y'
                AND NVL (Notification_Date, Modified_Date) <= v_date;

      /*Added Ended on 04/01/2011*/
      DELETE FROM MLI_NOTIFICATIONS
            WHERE     NOTIFICATION_SENT = 'Y'
                  AND NVL (Notification_Date, Modified_Date) <= v_date;
   END Delete_Notifications;

   /******************End Procedure Delete_Notifications*************************/

   /******************Start Procedure UPDATE_SUBSCRIPTION***********************/

   PROCEDURE UPDATE_SUBSCRIPTION (p_operation              IN VARCHAR2,
                                  p_device_id              IN NUMBER,
                                  p_interface_id           IN NUMBER,
                                  p_dt_key                 IN VARCHAR,
                                  p_dr_key                 IN VARCHAR,
                                  p_bfg_ntn_id             IN NUMBER,
                                  p_cdsv_key               IN VARCHAR,
                                  p_device_status          IN VARCHAR,
                                  p_old_device_status      IN VARCHAR,
                                  p_foi_id                 IN NUMBER,
                                  p_test_id                IN NUMBER,
                                  p_entity                 IN VARCHAR,
                                  p_chassis_id             IN VARCHAR,
                                  p_vas_product_name       IN VARCHAR,
                                  p_new_network_name       IN VARCHAR,
                                  p_old_network_name       IN VARCHAR,
                                  p_host_name              IN VARCHAR,
                                  p_old_management_type    IN NUMBER,
                                  p_new_management_type    IN NUMBER,
                                  p_filter                 IN CHAR,
                                  p_report_service_level   IN VARCHAR,
                                  p_edw_filter             IN CHAR)
   IS
      /*
      -----------------------------------------------------------------------------------------
         -- Program Unit Name   : UPDATE_SUBSCRIPTION

         -- Program Unit Type   : Procedure
         -- Description         : Procedure is used to identify if any consumer is subscribed to
             the device and insert into MLI_SUBSCRIBED_DEVICES
         -- MODIFICATION HISTORY

         -- Version      Person        Date        Comments

         -- ---------    ------      --------    -----------------------------------------------------
         --     1.0      Nilesh    30/06/2010  Initial Version

         -- --------------------------------------------------------------------------------------
      */
      v_ntn_con_id         bfg_network_nodes.ntn_con_id%TYPE;
      v_count              NUMBER (10) := 0;
      v_operation          VARCHAR2 (1);
      v_count1             NUMBER (10) := 0;
      v_bfg_product_type   BFG_NODE_PRODUCT_TYPES.NDT_NAME%TYPE;
      v_tmp_id             INCOMING_EVENT_EXPIRY.ID%TYPE;
   BEGIN
      IF NVL (p_bfg_ntn_id, 0) > 0             /* If BFG NTN ID is not null */
      THEN
         BEGIN
            /* Retrieve the contract id */
            SELECT ntn_con_id
              INTO v_ntn_con_id
              FROM bfg_network_nodes
             WHERE ntn_id = p_bfg_ntn_id;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN;
         END;


         /*Add ended by Ramyajit for TNR017 MLI 6.0*/

         /*****For EDW start added by Ramyajit on 11/10/2010**/
         /* If the feature option isntance is updated, need to check whether the vas product associated with it is subscribed for notification */
         IF (p_foi_id IS NOT NULL)
         THEN
            /*Commented for muttating trigger error in bfoi_subs by Ramyajit on 28/09/2011*/
            /*FOR crec1 IN (
                               SELECT  DISTINCT DESTINATION_ID
                               FROM    MLI_SUBSCRIPTION MS,
                                       S_BFG_FEATURE_OPTION_INSTANCES BFOI,
                                       BFG_FEATURE_OPTIONS BFEO
                               WHERE   BFOI.FOI_ID = P_FOI_ID
                               AND     BFOI.FOI_FEO_ID = BFEO.FEO_ID
                               AND     BFEO.FEO_NAME = MS.VAS_PRODUCT_NAME
                           )*/
            FOR crec1 IN (SELECT DISTINCT Destination_Id
                            FROM mli_subscription
                           WHERE vas_product_name = p_vas_product_name)
            LOOP
               IF (LOWER (crec1.destination_id) = ('edw'))
               THEN
                  /* If the device record is updated the operation would be a UPDATE. If the device is brought into in-service,
                  it should be sent as ADD even though the record in managed_devices is updated*/

                  v_operation := p_operation;

                  IF (    p_device_status <> p_old_device_status
                      AND p_device_status = 'IS'
                      AND p_operation = 'U')
                  THEN
                     v_operation := 'U';
                  END IF;


                  INSERT INTO MLI_SUBSCRIBED_DEVICES (id,
                                                      destination_id,
                                                      device_id,
                                                      interface_id,
                                                      operation,
                                                      test_id,
                                                      chassis_id,
                                                      entity,
                                                      foi_id)
                       VALUES (MLI_SUB_DEV_SEQ.NEXTVAL,
                               crec1.destination_id,
                               p_device_id,
                               p_interface_id,
                               v_operation,
                               p_test_id,
                               p_chassis_id,
                               p_entity,
                               p_foi_id);
               END IF;
            END LOOP;

            RETURN;
         END IF;

         /*****For EDW End************************************/

         SELECT COUNT (*)
           INTO v_count
           FROM MLI_SUBSCRIPTION
          WHERE device_ntn_id = NVL (p_bfg_ntn_id, 0);

         IF v_count > 0
         THEN
            FOR crec
               IN (SELECT DISTINCT destination_id
                     FROM mli_subscription
                    WHERE        device_ntn_id = p_bfg_ntn_id
                             AND device_status = p_device_status
                          OR (    device_status = p_old_device_status
                              AND p_device_status = 'CSD'))
            LOOP
               INSERT INTO MLI_SUBSCRIBED_DEVICES (id,
                                                   destination_id,
                                                   device_id,
                                                   interface_id,
                                                   operation,
                                                   test_id,
                                                   entity,
                                                   foi_id)
                    VALUES (MLI_SUB_DEV_SEQ.NEXTVAL,
                            crec.destination_id,
                            p_device_id,
                            p_interface_id,
                            p_operation,
                            p_test_id,
                            p_entity,
                            p_foi_id);
            END LOOP;
         ELSE
            /*Modified the cursor query for TNR015 Voyance by adding network_name and host_name as parameters*/
            /*Modified the cursur query for TNR017 MLI 6.0*/


            --nmdb.log_activity('DEBUG','D','p_entity='||p_entity||',v_ntn_con_id='||v_ntn_con_id||',p_dt_key='||p_dt_key||',p_dr_key='||p_dr_key||',p_cdsv_key='||p_cdsv_key||',p_bfg_ntn_id='||p_bfg_ntn_id||',p_device_status='||p_device_status||',p_old_device_status='||p_old_device_status||',p_new_network_name='||p_new_network_name||',p_old_network_name='||p_old_network_name||',p_host_name='||p_host_name||'@');


            FOR crec
               IN (SELECT DISTINCT destination_id
                     FROM mli_subscription
                    WHERE     (   contract_id = v_ntn_con_id
                               OR contract_id IS NULL)
                          AND (device_type = p_dt_key OR device_type IS NULL)
                          AND (device_role = p_dr_key OR device_role IS NULL)
                          AND (   device_service = p_cdsv_key
                               OR device_service IS NULL)
                          AND (   device_ntn_id = p_bfg_ntn_id
                               OR device_ntn_id IS NULL)
                          AND (   device_status = p_device_status
                               OR (device_status = p_old_device_status)
                               OR device_status IS NULL)
                         AND (   Network_Name = p_new_network_name
                               OR (Network_name = p_old_network_name)
                               OR Network_Name IS NULL)  /** Commented out for NIAB Phase 2 by Shahrul Z 03-SEP-2014 Reason: NIAB subscription is base on Network_name. Additional filter was added to exclude Voyance from probe notification**/
                               AND (   (p_host_name LIKE hostname_prefix || '%')
                               OR hostname_prefix IS NULL))
            LOOP
            
               IF    (    LOWER (crec.destination_id) = ('ontario')
                      AND (   (
                                p_entity = 'D' 
                                 /**
                                    Below condition is added by Shahrul Z (11/11/2015) to fix BV908425 issue.
                                    Device UPDATE notification is sent to Ontario when Configstore Jobs execute.
                                    RCA: There's no checking if update of OS_VERSION contains a new value.
                                 **/
                                  AND (
                                        p_new_network_name IS NOT NULL AND
                                        p_old_network_name IS NOT NULL AND
                                        p_host_name IS NOT NULL
                                        )
                               )
                           OR (p_entity = 'P')
                           OR (p_entity = 'I'
                               AND (p_operation in ('U','D')
                                    AND (p_new_management_type in (2,3,8)      -- 8 is 'Performance and Event' (GSCE172133: Interface Tagging)
                                         OR p_old_management_type in (2,3,8)
                                    )
                               )
                           )
                         )
                      )
                  OR (    LOWER (crec.destination_id) = ('netrepsolstice')
                      AND ( p_report_service_level IS NOT NULL
                            /**
                                Added by Kevin for FV devices that have null report service level
                            */
                            OR (    p_report_service_level is NULL
                                    AND ( p_old_network_name = 'BT_Spring_CE'
                                          OR p_old_network_name = 'Reuters_Client'
                                        )
                               )
                          )
                      AND (   (    p_entity = 'D'
                               AND (   p_operation = 'D'
                                    OR (p_operation = 'U' AND p_filter = 'Y')))
                           OR p_entity = 'P'
                           OR (    p_entity = 'I'
                               AND (  p_operation in ('U','D')
                                    AND (   p_new_management_type IN (2,8)            -- 8 is 'Performance and Event' (GSCE172133: Interface Tagging)
                                         OR p_old_management_type IN (2,8) ))
                               AND p_filter = 'Y')))
                  OR (LOWER (crec.destination_id) = ('bfg'))
                  OR (    LOWER (crec.destination_id) = ('edw')
                      AND (   (p_entity = 'H')
                           OR (    p_entity = 'D'
                               AND (   p_operation = 'D'
                                    OR (p_operation = 'U' AND p_filter = 'Y')))
                           OR (p_entity = 'I' AND p_edw_filter = 'Y'))
                      AND (p_dt_key IN
                              ('ASA',
                               'CWL',
                               'NWL',
                               'NRA',
                               'CR',
                               'NWN',
                               'NLN',
                               'NMS',
                               'CCS')))
                  OR (LOWER (crec.destination_id) LIKE ('voyance%') AND  (p_entity = 'D'))/** Commented out for NIAB Phase 2 by Shahrul Z 03-SEP-2014 Reason: ensure only device notification is sent to Voyance **/
                  OR (LOWER (crec.destination_id) LIKE ('niab-%') AND (
                    ( -- GSCE172133(Interface Tagging)
                     p_entity = 'I' -- On interface
                     AND p_operation = 'U' -- Update operation
                     AND NVL(p_old_management_type, '-1') != NVL(p_new_management_type, '-1') -- Management type is changed
                     AND p_new_management_type IN (0, 2, 7, 8) -- To one of: Null, Performance, Event, Performance Event 
                    ) -- End of: GSCE172133(Interface Tagging)
                    OR p_entity = 'P'))
                  OR (LOWER (crec.destination_id) in ('w4n','eyelo')
                      AND (p_entity in ('D','P')
                           OR (p_entity = 'I'
                           AND (p_operation in ('U', 'D')
                           AND (p_new_management_type in (2,3,8)                          -- 8 is 'Performance and Event' (GSCE172133: Interface Tagging)
                                OR P_OLD_MANAGEMENT_TYPE in (2,3,8))))))
               THEN
                  /* If the device record is updated the operation would be a UPDATE. If the device is brought into in-service,
                  it should be sent as ADD even though the record in managed_devices is updated*/
                  v_operation := p_operation;
                  
                  --nmdb.log_activity('DEBUG','D',crec.destination_id||':p_device_status = '||p_device_status ||',p_old_device_status='||p_old_device_status||'p_operation='||p_operation||',v_operation='||v_operation);

                  IF (    p_device_status <> p_old_device_status
                      AND p_device_status = 'IS'
                      AND p_operation = 'U')
                  THEN
                     v_operation := 'I';
                  END IF;


                  BEGIN
                     v_count1 := 0;

                     SELECT COUNT (*)
                       INTO v_count1
                       FROM mli_destination_mapping
                      WHERE     LOWER (Destination_Id) =
                                   LOWER (crec.destination_id)
                            AND ENTITY = p_entity
                            AND ACTIVE = 'Y';
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        NULL;
                  END;
                  

                  -- Start of: condition to send notification:
                  IF (v_count1 > 0)
                  THEN
                      --nmdb.log_activity('DEBUG','D','INSERT INTO MLI_SUBSCRIBED_DEVICES for '||crec.destination_id);

                      -- Start of event expiry (GSCE172133: Interface Tagging)
                      IF (LOWER(crec.destination_id) LIKE 'niab-%' 
                        AND p_entity = 'I'
                        AND NVL(p_old_management_type, '-1') != NVL(p_new_management_type, '-1'))
                      -- Since this is only meant for tagging.
                      -- This condition covers:
                      -- - NULL->NULL on INSERT/UPDATE should not be assumed as 'tagged'
                      -- - NULL->0 on UPDATE (tagging with Null which value is 0) should be assumed as 'tagged'
                      -- - NULL->NULL on UPDATE should not be assumed as 'tagged'
                      THEN
                          v_operation := 'T';

                          BEGIN
                              SELECT ID
                              INTO v_tmp_id
                              FROM incoming_event_expiry
                              WHERE category='interface-tagging' and item=p_interface_id;
                              IF SQL%FOUND THEN
                                  UPDATE incoming_event_expiry
                                  SET expired_time = sysdate + 3/144
                                  WHERE id = v_tmp_id;
                              END IF;
                          EXCEPTION
                              WHEN NO_DATA_FOUND
                              THEN
                                  INSERT INTO incoming_event_expiry (id, category, item, waited_status, expired_time) 
                                      VALUES (iee_seq.nextval, 'interface-tagging', p_interface_id, 'received_by_niab', sysdate + 3/144);
                          END;

                      END IF;
                      -- End of event expiry (GSCE172133: Interface Tagging)

                      INSERT INTO MLI_SUBSCRIBED_DEVICES (id,
                                                         destination_id,
                                                         device_id,
                                                         interface_id,
                                                         operation,
                                                         test_id,
                                                         chassis_id,
                                                         entity,
                                                         foi_id)
                          VALUES (MLI_SUB_DEV_SEQ.NEXTVAL,
                                  crec.destination_id,
                                  p_device_id,
                                  p_interface_id,
                                  v_operation,
                                  p_test_id,
                                  p_chassis_id,
                                  p_entity,
                                  p_foi_id);

                  END IF;
                  -- End of: condition to send notification

               END IF;
            END LOOP;

            /*********for bfg_feature_option_instance table start Added by Ramyajit on 06/10/2010**/

            /**********For EDW Start Added by Ramyajit on 06/10/2010******/
            /* The below cursor looks for device updates where the device has a subscribed VAS product */

            FOR crec2
               IN (SELECT DISTINCT a.Destination_id
                     FROM mli_subscription a,
                          bfg_feature_options b,
                          bfg_feature_option_instances c,
                          bfg_feature_opt_net_nodes d
                    WHERE     a.vas_product_name = b.feo_name
                          AND b.feo_id = c.foi_feo_id
                          AND c.foi_id = d.foi_foi_id
                          AND d.foi_ntn_id = p_bfg_ntn_id
                          AND (   device_status = p_device_status
                               OR (device_status = p_old_device_status)
                               OR device_status IS NULL))
            LOOP
               IF (LOWER (crec2.destination_id) = ('edw'))
               THEN
                  /* If the device record is updated the operation would be a UPDATE. If the device is brought into in-service,
                  it should be sent as ADD even though the record in managed_devices is updated*/

                  v_operation := p_operation;

                  IF (    p_device_status <> p_old_device_status
                      AND p_device_status = 'IS'
                      AND p_operation = 'U')
                  THEN
                     v_operation := 'I';
                  END IF;

                  BEGIN
                     v_count1 := 0;

                     SELECT COUNT (*)
                       INTO v_count1
                       FROM mli_destination_mapping
                      WHERE     LOWER (Destination_Id) =
                                   LOWER (crec2.destination_id)
                            AND ENTITY = p_entity
                            AND ACTIVE = 'Y';
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        NULL;
                  END;

                  IF (v_count1 > 0)
                  THEN
                     INSERT INTO MLI_SUBSCRIBED_DEVICES (id,
                                                         destination_id,
                                                         device_id,
                                                         interface_id,
                                                         operation,
                                                         test_id,
                                                         chassis_id,
                                                         entity,
                                                         foi_id)
                          VALUES (MLI_SUB_DEV_SEQ.NEXTVAL,
                                  crec2.destination_id,
                                  p_device_id,
                                  p_interface_id,
                                  v_operation,
                                  p_test_id,
                                  p_chassis_id,
                                  p_entity,
                                  p_foi_id);
                  END IF;
               END IF;
            END LOOP;
         /**********For EDW End********/


         /******for bfg_feature_option_instances table end***/

         END IF;
      END IF;
   END update_subscription;

   /******************END Procedure UPDATE_SUBSCRIPTION***********************/

   /******************START Procedure CREATE_NOTIFICATION_FILES***********************/
   PROCEDURE CREATE_NOTIFICATION_FILES
   AS
      v_clobLen            PLS_INTEGER;
      v_fileHandle         UTL_FILE.FILE_TYPE;
      v_pos                PLS_INTEGER := 1;
      v_buffer             VARCHAR2 (32767);
      v_chr10              PLS_INTEGER;
      v_amount    CONSTANT BINARY_INTEGER := 32767;
      v_dir                VARCHAR2 (50) := 'XFB_INPUT_FILES';
      v_data_fileName      VARCHAR2 (100);
      v_par_fileName       VARCHAR2 (100);
      v_run_local_script   VARCHAR2 (100);
      v_count              NUMBER (4);
      v_threshold          NUMBER (4);
   BEGIN
      SELECT PARM_VALUE
        INTO v_run_local_script
        FROM NMDB_PARAMETERS
       WHERE PARM_NAME = 'V_RUN_LOCAL_SCRIPT';

      BEGIN
         SELECT TO_NUMBER (PARM_VALUE)
           INTO v_threshold
           FROM NMDB_PARAMETERS
          WHERE PARM_NAME = 'NOTIFICATIONSENDQTY';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_threshold := 101;
      END;

      v_count := 0;

      FOR CREC
         IN (  SELECT NOTF.ID,
                      NOTF.NOTIFICATION_TXT,
                      NOTF.DESTINATION_ID,
                      DEST.MLI_VERSION,
                      DEST.XFB_NODE,
                      DEST.XFB_RUN_REMOTE,
                      NOTF.DEVICE_ID,
                      DEST.DESTINATION_NAME,
                      DEST.XFB_REMOTE_ARG,
                      NOTF.FILE_ATTRIBUTE
                 FROM MLI_NOTIFICATIONS NOTF, MLI_DESTINATIONS DEST
                WHERE     NVL (NOTF.XML_COPIED, 'N') <> 'Y'
                      AND LOWER (NOTF.DESTINATION_ID) =
                             LOWER (DEST.DESTINATION_ID)
                      AND DEST.MLI_VERSION IN ('MLI 5.0', 'MLI 6.0','MLI 8.0')
             ORDER BY NOTF.ID)
      LOOP
         v_count := v_count + 1;
         EXIT WHEN v_count = v_threshold;
         v_data_fileName :=
               'NMDB_'
            || CREC.DESTINATION_ID
            || '_'
            || CREC.ID
            || '_'
            || NVL(TO_CHAR(CREC.DEVICE_ID),CREC.FILE_ATTRIBUTE)

            || '.xml';
         v_clobLen := DBMS_LOB.GETLENGTH (CREC.NOTIFICATION_TXT);
         v_fileHandle :=
            UTL_FILE.FOPEN (v_dir,
                            v_data_fileName,
                            'w',
                            v_amount);
         v_pos := 1;
         DBMS_OUTPUT.put_line (
               'XML received for '
            || crec.destination_id
            || ' and cloblen = '
            || v_cloblen);

         WHILE v_pos < v_clobLen
         LOOP
            v_buffer :=
               DBMS_LOB.SUBSTR (CREC.NOTIFICATION_TXT, v_amount, v_pos);
            EXIT WHEN v_buffer IS NULL;

            v_chr10 := INSTR (v_buffer, CHR (10), -1);

            IF v_chr10 != 0
            THEN
               v_buffer := SUBSTR (v_buffer, 1, v_chr10 - 1);
            END IF;

            UTL_FILE.PUT_LINE (v_fileHandle, v_buffer, TRUE);
            v_pos := v_pos + LEAST (LENGTH (v_buffer) + 1, v_amount);
         END LOOP;

         UTL_FILE.FCLOSE (v_fileHandle);

         v_par_fileName :=
               'NMDB_'
            || CREC.DESTINATION_ID
            || '_'
            || CREC.ID
            || '_'
            || NVL(TO_CHAR(CREC.DEVICE_ID),CREC.FILE_ATTRIBUTE)

            || '.par';
         v_fileHandle := UTL_FILE.FOPEN (v_dir, v_par_fileName, 'w');
         UTL_FILE.PUT_LINE (v_fileHandle,
                            'NAME=' || CREC.DESTINATION_NAME,
                            TRUE);
         UTL_FILE.PUT_LINE (v_fileHandle,
                            'NODEREMOTE=' || CREC.XFB_NODE,
                            TRUE);
         UTL_FILE.PUT_LINE (v_fileHandle, 'FILETYPE=XML', TRUE);
         UTL_FILE.PUT_LINE (v_fileHandle,
                            'FROMFILE=' || v_data_fileName,
                            TRUE);

         UTL_FILE.PUT_LINE (v_fileHandle, 'TOFILE=' || v_data_fileName, TRUE);
         UTL_FILE.PUT_LINE (
            v_fileHandle,
            'RUNLOCAL=' || v_run_local_script || ' ' || v_data_fileName,
            TRUE);

         IF (CREC.XFB_REMOTE_ARG = 'Y')
         THEN
            UTL_FILE.PUT_LINE (
               v_fileHandle,
               'RUNREMOTE=' || CREC.XFB_RUN_REMOTE || ' ' || v_data_fileName,
               TRUE);
         ELSE
            UTL_FILE.PUT_LINE (v_fileHandle,
                               'RUNREMOTE=' || CREC.XFB_RUN_REMOTE,
                               TRUE);
         END IF;

         UTL_FILE.FCLOSE (v_fileHandle);

         UPDATE MLI_NOTIFICATIONS
            SET XML_COPIED = 'Y'
          WHERE ID = CREC.ID;
      END LOOP;
   END CREATE_NOTIFICATION_FILES;
/******************END Procedure CREATE_NOTIFICATION_FILES***********************/

END MLI;